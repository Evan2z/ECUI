{
    "array": [
        {
            "name": "indexOf",
            "type": "array",
            "desc": "查询数组中指定对象的位置序号。",
            "params": [
                {"name": "list", "type": "Array", "desc": "数组对象"},
                {"name": "obj", "type": "Object", "desc": "需要查询的对象"}
            ],
            "return": {"type": "number", "desc": "位置序号，不存在返回 -1"},
            "remark": "indexOf 方法返回完全匹配的对象在数组中的序号，如果在数组中找不到指定的对象，返回 -1。"
        },

        {
            "name": "remove",
            "type": "array",
            "desc": "从数组中移除对象。",
            "params": [
                {"name": "list", "type": "Array", "desc": "数组对象"},
                {"name": "obj", "type": "Object", "desc": "需要移除的对象"}
            ]
        }
    ],

    "dom": [
        {
            "name": "addClass",
            "type": "dom",
            "desc": "为 Element 对象添加新的样式。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"},
                {"name": "className", "type": "string", "desc": "样式名，可以是多个，中间使用空白符分隔"}
            ]
        },

        {
            "name": "children",
            "type": "dom",
            "desc": "获取所有 parentNode 为指定 Element 的子 Element 集合。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "Array", "desc": "Element 对象数组"}
        },

        {
            "name": "contain",
            "type": "dom",
            "desc": "判断一个 Element 对象是否包含另一个 Element 对象。",
            "params": [
                {"name": "container", "type": "HTMLElement", "desc": "包含的 Element 对象"},
                {"name": "contained", "type": "HTMLElement", "desc": "被包含的 Element 对象"}],
            "return": {"type": "boolean", "desc": "contained 对象是否被包含于 container 对象的 DOM 节点上"},
            "remark": "contain 方法认为两个相同的 Element 对象相互包含。"
        },

        {
            "name": "create",
            "type": "dom",
            "desc": "创建 Element 对象。",
            "params": [
                {"name": "className", "type": "string", "desc": "样式名称"},
                {"name": "cssText", "type": "string", "desc": "样式文本"},
                {"name": "tagName", "type": "string", "desc": "标签名称，默认创建一个空的 div 对象"}
            ],
            "return": {"type": "HTMLElement", "desc": "创建的 Element 对象"}
        },

        {
            "name": "first",
            "type": "dom",
            "desc": "获取 Element 对象的第一个子 Element 对象。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "HTMLElement", "desc": "子 Element 对象"}
        },

        {
            "name": "getParent",
            "type": "dom",
            "desc": "获取 Element 对象的父 Element 对象。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "HTMLElement", "desc": "父 Element 对象，如果没有，返回 null"},
            "remark": "在 IE 下，Element 对象被 removeChild 方法移除时，parentNode 仍然指向原来的父 Element 对象，与 W3C 标准兼容的属性应该是 parentElement。"
        },

        {
            "name": "getPosition",
            "type": "dom",
            "desc": "获取 Element 对象的页面位置。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "Object", "desc": "位置信息"},
            "remark": [
                "getPosition 方法将返回指定 Element 对象的位置信息。属性如下：",
                "<table class=\"clsSTD\"><tr><td>left</td><td>number，X轴坐标</td></tr><tr><td>top</td><td>number，Y轴坐标</td></tr></table>"
            ]
        },

        {
            "name": "getStyle",
            "type": "dom",
            "desc": "获取 Element 对象的 CssStyle 对象或者是指定的样式值。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"},
                {"name": "name", "type": "string", "desc": "样式名称"}
            ],
            "return": {"type": "CssStyle|Object", "desc": "CssStyle 对象或样式值"},
            "remark": "getStyle 方法如果不指定样式名称，将返回 Element 对象的当前 CssStyle 对象。"
        },

        {
            "name": "getText",
            "type": "dom",
            "desc": "获取 Element 对象的文本。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "string", "desc": "Element 对象的文本"}
        },

        {
            "name": "insertAfter",
            "type": "dom",
            "desc": "将 Element 对象插入指定的 Element 对象之后。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "被插入的 Element 对象"},
                {"name": "target", "type": "HTMLElement", "desc": "目标 Element 对象"}
            ],
            "return": {"type": "HTMLElement", "desc": "被插入的 Element 对象"},
            "remark": "如果指定的 Element 对象没有父 Element 对象，相当于 {'remove'|method:'dom'} 操作。"
        },

        {
            "name": "insertBefore",
            "type": "dom",
            "desc": "将 Element 对象插入指定的 Element 对象之前。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "被插入的 Element 对象"},
                {"name": "target", "type": "HTMLElement", "desc": "目标 Element 对象"}
            ],
            "return": {"type": "HTMLElement", "desc": "被插入的 Element 对象"},
            "remark": "如果指定的 Element 对象没有父 Element 对象，相当于 {'remove'|method:'dom'} 操作。"
        },

        {
            "name": "insertHTML",
            "type": "dom",
            "desc": "向指定的 Element 对象内插入一段 html 代码。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"},
                {"name": "position", "type": "string", "desc": "插入 html 的位置信息，取值为 beforeBegin,afterBegin,beforeEnd,afterEnd"},
                {"name": "html", "type": "string", "desc": "要插入的 html 代码"}
            ]
        },

        {
            "name": "last",
            "type": "dom",
            "desc": "获取 Element 对象的最后一个子 Element 对象。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "HTMLElement", "desc": "子 Element 对象"}
        },

        {
            "name": "moveElements",
            "type": "dom",
            "desc": "将指定的 Element 对象的内容移动到目标 Element 对象中。",
            "params": [
                {"name": "source", "type": "HTMLElement", "desc": "指定的 Element 对象"},
                {"name": "target", "type": "HTMLElement", "desc": "目标 Element 对象"},
                {"name": "all", "type": "boolean", "desc": "是否移动所有的 DOM 对象，默认仅移动 ElementNode 类型的对象"}
            ]
        },

        {
            "name": "next",
            "type": "dom",
            "desc": "获取 Element 对象的下一个 Element 对象。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "HTMLElement", "desc": "Element 对象"}
        },

        {
            "name": "ready",
            "type": "dom",
            "desc": "设置页面加载完毕后自动执行的方法。",
            "params": [
                {"name": "func", "type": "Function", "desc": "需要自动执行的方法"}
            ]
        },

        {
            "name": "remove",
            "type": "dom",
            "desc": "从页面中移除 Element 对象。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "HTMLElement", "desc": "被移除的 Element 对象"}
        },

        {
            "name": "removeClass",
            "type": "dom",
            "desc": "删除 Element 对象中的样式。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"},
                {"name": "className", "type": "string", "desc": "样式名，可以是多个，中间使用空白符分隔"}
            ]
        },

        {
            "name": "setInput",
            "type": "dom",
            "desc": "设置输入框的表单项属性。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "InputElement 对象"},
                {"name": "name", "type": "string", "desc": "新的表单项名称，默认与 el 相同"},
                {"name": "type", "type": "string", "desc": "新的表单项类型，默认为 el 相同"}
            ],
            "return": {"type": "HTMLElement", "desc": "设置后的 InputElement 对象"},
            "remark": "如果没有指定一个表单项，setInput 方法将创建一个表单项。"
        },

        {
            "name": "setStyle",
            "type": "dom",
            "desc": "设置 Element 对象的样式值。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"},
                {"name": "name", "type": "string", "desc": "样式名称"},
                {"name": "value", "type": "string", "desc": "样式值"}
            ]
        },

        {
            "name": "setText",
            "type": "dom",
            "desc": "设置 Element 对象的文本。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"},
                {"name": "text", "type": "string", "desc": "Element 对象的文本"}
            ]
        }
    ],

    "string": [
        {
            "name": "encodeHTML",
            "type": "string",
            "desc": "对目标字符串进行 html 编码。",
            "params": [
                {"name": "source", "type": "string", "desc": "目标字符串"}
            ],
            "return": {"type": "string", "desc": "结果字符串"},
            "remark": "encodeHTML 方法对四个字符进行编码，分别是 &<>\""
        },

        {
            "name": "getByteLength",
            "type": "string",
            "desc": "计算字符串的字节长度。",
            "params": [
                {"name": "source", "type": "string", "desc": "目标字符串"},
                {"name": "charsetName", "type": "string", "desc": "字符对应的编码集"}
            ],
            "return": {"type": "number", "desc": "字节长度"},
            "remark": "如果没有指定编码集，相当于获取字符串属性 length 的值。"
        },

        {
            "name": "sliceByte",
            "type": "string",
            "desc": "根据字节长度截取字符串。",
            "params": [
                {"name": "source", "type": "string", "desc": "目标字符串"},
                {"name": "length", "type": "number", "desc": "需要截取的字节长度"},
                {"name": "charsetName", "type": "string", "desc": "字符对应的编码集"}
            ],
            "return": {"type": "string", "desc": "结果字符串"},
            "remark": "如果没有指定编码集，相当于字符串的 slice 方法。"
        },

        {
            "name": "toCamelCase",
            "type": "string",
            "desc": "驼峰命名法转换。",
            "params": [
                {"name": "source", "type": "string", "desc": "目标字符串"}
            ],
            "return": {"type": "string", "desc": "结果字符串"},
            "remark": "toCamelCase 方法将 xxx-xxx 字符串转换成 xxxXxx。"
        },

        {
            "name": "toHalfWidth",
            "type": "string",
            "desc": "将目标字符串中常见全角字符转换成半角字符。",
            "params": [
                {"name": "source", "type": "string", "desc": "目标字符串"}
            ],
            "return": {"type": "string", "desc": "结果字符串"}
        },

        {
            "name": "trim",
            "type": "string",
            "desc": "过滤字符串两端的空白字符。",
            "params": [
                {"name": "source", "type": "string", "desc": "目标字符串"}
            ],
            "return": {"type": "string", "desc": "结果字符串"}
        }
    ],

    "util": [
        {
            "name": "attachEvent",
            "type": "util",
            "desc": "挂载事件。",
            "params": [
                {"name": "obj", "type": "Object", "desc": "响应事件的对象"},
                {"name": "type", "type": "string", "desc": "事件类型"},
                {"name": "func", "type": "Function", "desc": "事件处理函数"}
            ]
        },

        {
            "name": "blank",
            "type": "util",
            "desc": "空函数。",
            "syntax": "ecui.ui.Control.onXXXXXX = ecui.<b>blank</b>",
            "remark": "blank 方法不应该被执行，也不进行任何处理，它用于提供给不需要执行操作的事件方法进行赋值，与 blank 类似的用于给事件方法进行赋值，而不直接被执行的方法还有 {'cancel'|method:'core'}。"
        },

        {
            "name": "cancel",
            "type": "util",
            "desc": "返回 false。",
            "syntax": "ecui.ui.Control.onXXXXXX = ecui.<b>cancel</b>",
            "remark": "cancel 方法不应该被执行，它每次返回 false，用于提供给需要返回逻辑假操作的事件方法进行赋值，例如需要取消默认事件操作的情况，与 cancel 类似的用于给事件方法进行赋值，而不直接被执行的方法还有 {'blank'|method:'core'}。"
        },

        {
            "name": "detachEvent",
            "type": "util",
            "desc": "卸载事件。",
            "params": [
                {"name": "obj", "type": "Object", "desc": "响应事件的对象"},
                {"name": "type", "type": "string", "desc": "事件类型"},
                {"name": "func", "type": "Function", "desc": "事件处理函数"}
            ]
        },

        {
            "name": "extend",
            "type": "util",
            "desc": "对象属性复制。",
            "params": [
                {"name": "target", "type": "Object", "desc": "目标对象"},
                {"name": "source", "type": "Object", "desc": "源对象"}
            ],
            "return": {"type": "Object", "desc": "目标对象"}
        },

        {
            "name": "findConstructor",
            "type": "util",
            "desc": "在 prototype 链的 constructor 上查找指定的属性。",
            "params": [
                {"name": "object", "type": "Object", "desc": "需要查找属性的对象"},
                {"name": "name", "type": "string", "desc": "属性名称"}
            ],
            "return": {"type": "Object", "desc": "属性值"}
        },

        {
            "name": "getView",
            "type": "util",
            "desc": "获取浏览器可视区域的相关信息。",
            "return": {"type": "Object", "desc": "浏览器可视区域信息"},
            "remark": [
                "getView 方法将返回浏览器可视区域的信息。属性如下：",
                "<table class=\"clsSTD\"><tr><td>top</td><td>number，可视区域最小X轴坐标</td></tr><tr><td>right</td><td>number，可视区域最大Y轴坐标</td></tr><tr><td>bottom</td><td>number，可视区域最大X轴坐标</td></tr><tr><td>left</td><td>number，可视区域最小Y轴坐标</td></tr><tr><td>width</td><td>number，可视区域的宽度</td></tr><tr><td>height</td><td>number，可视区域的高度</td></tr><tr><td>pageWidth</td><td>number，页面的宽度</td></tr><tr><td>pageHeight</td><td>number，页面的高度</td></tr></table>"
            ]
        },

        {
            "name": "inherits",
            "type": "util",
            "desc": "类继承。",
            "params": [
                {"name": "subClass", "type": "Function", "desc": "子类"},
                {"name": "superClass", "type": "Function", "desc": "父类"}
            ],
            "return": {"type": "Object", "desc": "subClass 的 prototype 属性"}
        },

        {
            "name": "timer",
            "type": "util",
            "desc": "创建一个定时器对象。",
            "params": [
                {"name": "func", "type": "Function", "desc": "定时器需要调用的函数"},
                {"name": "delay", "type": "number", "desc": "定时器延迟调用的毫秒数，如果为负数表示需要连续触发"},
                {"name": "caller", "type": "Object", "desc": "调用者，在 func 被执行时，this 指针指向的对象，可以为空"},
                {"name": "...", "type": "Object", "desc": "向 func 传递的参数"}
            ],
            "return": {"type": "Function", "desc": "用于关闭定时器的方法"},
            "example": [
                "// 连续的触发 check 函数\nvar stop = ecui.util.timer(check, -200);\n...\n// 中止定时器的运行\nstop();"
            ]
        },

        {
            "name": "toNumber",
            "type": "util",
            "desc": "将对象转换成数值。",
            "params": [
                {"name": "obj", "type": "Object", "desc": "需要转换的对象"}
            ],
            "return": {"type": "number", "desc": "对象的数值"},
            "remark": "toNumber 方法会省略数值的符号，例如字符串 9px 将当成数值的 9，不能识别的数值将默认为 0。"
        }
    ],

    "core": [
        {
            "name": "$bind",
            "type": "core",
            "desc": "使一个 Element 对象与一个 {'controls'|menu} 在逻辑上绑定。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"},
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}"}
            ],
            "return": {"type": "boolean", "desc": "绑定操作是否成功"},
            "remark": "一个 Element 对象只能绑定一个 {'controls'|menu}，多次绑定仅第一次有效，绑定后的 Element 对象可以通过 {'getControl'|method:'core'} 方法得到绑定的 {'controls'|menu}。使用页面静态初始化(参见 {'ecui'|menu})控件后，如果需要修改 Element 对象绑定的 {'controls'|menu}，<font color=\"red\">通过改变 Element 对象的 ecui 属性值，并调用核心提供的 {'init'|method:'core'} 方法初始化，是无效的</font>。请调用 {'dispose'|method:'core'} 方法释放控件后，重新初始化，<font color=\"red\">控件的 {'\\$dispose'|method:'control'} 方法或 {'ondispose'|event:'control'} 事件中需要释放与其相关联的所有非 JSObject 的绑定</font>。"
        },

        {
            "name": "$clearState",
            "type": "core",
            "desc": "清除控件的状态。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "ECUI 控件"}
            ],
            "remark": "控件在销毁、隐藏与失效等情况下，需要使用 $clearState 方法清除已经获得的焦点与激活等状态。"
        },

        {
            "name": "$connect",
            "type": "core",
            "desc": "为两个 {'controls'|menu} 建立连接。",
            "params": [
                {"name": "caller", "type": "ecui.ui.Control", "desc": "发起建立连接请求的 {'controls'|menu}"},
                {"name": "func", "type": "Function", "desc": "用于建立连接的方法，即通过调用 func.call(caller, ecui.get(targetId)) 建立连接"},
                {"name": "targetId", "type": "string", "desc": "被连接的 {'controls'|menu} 标识符，即在标签的 ecui 属性中定义的 id 值"}
            ],
            "remark": "使用页面静态初始化或页面动态初始化(参见 {'ecui'|menu})方式，控件创建时，需要的关联控件也许还未创建。$connect 方法提供将指定的函数滞后到对应的控件创建后才调用的模式。如果 targetId 对应的控件还未创建，则调用会被搁置，直到需要的控件创建成功后，再自动执行(参见 {'create'|method:'core'} 方法)。"
        },

        {
            "name": "$create",
            "type": "core",
            "desc": "创建 {'controls'|menu}。",
            "params": [
                {"name": "type", "type": "Function", "desc": "控件的构造函数"},
                {"name": "options", "type": "Object", "desc": "初始化选项(参见 {'controls'|menu})"}
            ],
            "return": {"type": "ecui.ui.Control", "desc": "{'controls'|menu}"},
            "remark": [
                "$create 方法创建控件时不会自动渲染控件。在大批量创建控件时，为了加快渲染速度，应该首先使用 $create 方法创建所有控件完成后，再批量分别调用控件的 {'cache'|method:'control'}、{'init'|method:'control'} 与 {'repaint'|method:'control'} 方法渲染控件。options 对象支持的属性如下：",
                "<table class=\"clsSTD\"><tr><td>id</td><td>string，当前控件的 id，提供给 {'\\$connect'|method:'core'} 与 {'get'|method:'core'} 使用</td></tr><tr><td>main</td><td>HTMLElement，与控件绑捆的 Element 对象(参见 {'getMain'|method:'control'} 方法)，如果忽略此参数将创建 Element 对象与控件绑捆</td></tr><tr><td>parent</td><td>ecui.ui.Control 或者 HTMLElement，父控件对象或者父 Element 对象</td></tr><tr><td>type</td><td>string，控件的类型样式，通常情况下省略此参数，使用 \"ec-控件名称\" 作为控件的类型样式</td></tr><tr><td>primary</td><td>string，控件的基本样式(参见 {'getPrimary'|method:'control'} 方法)，有关样式的描述参见 {'styles'|menu}，如果忽略此参数将使用主元素的 className 属性</td></tr></table>"
            ]
        },

        {
            "name": "$fastCreate",
            "type": "core",
            "desc": "快速创建 {'controls'|menu}。",
            "params": [
                {"name": "type", "type": "Function", "desc": "控件的构造函数"},
                {"name": "el", "type": "HTMLElement", "desc": "控件对应的 Element 对象"},
                {"name": "parent", "type": "ecui.ui.Control", "desc": "控件的父控件"},
                {"name": "options", "type": "Object", "desc": "初始化选项(参见 {'controls'|menu})"}
            ],
            "return": {"type": "ecui.ui.Control", "desc": "{'controls'|menu}"},
            "remark": "$fastCreate 方法仅供控件生成自己的部件使用，生成的控件不在控件列表中注册，不自动刷新也不能通过 {'query'|method:'core'} 方法查询(参见 {'\\$create'|method:'core'} 方法)。$fastCreate 方法通过分解 Element 对象的 className 属性得到样式信息，其中第一个样式为类型样式，第二个样式为基本样式。"
        },

        {
            "name": "$register",
            "type": "core",
            "desc": "注册一个插件。",
            "params": [
                {"name": "name", "type": "string", "desc": "插件的初始化选项名"},
                {"name": "func", "type": "Function", "desc": "插件的初始化函数"}
            ]
        },

        {
            "name": "calcHeightRevise",
            "type": "core",
            "desc": "获取高度修正值(即计算 padding, border 样式对 height 样式的影响)。",
            "params": [
                {"name": "style", "type": "CssStyle", "desc": "CssStyle 对象"}
            ],
            "return": {"type": "number", "desc": "高度修正值"},
            "remark": "IE 的盒子模型不完全遵守 W3C 标准，因此，需要使用 calcHeightRevise 方法计算 offsetHeight 与实际的 height 样式之间的修正值。"
        },

        {
            "name": "calcLeftRevise",
            "type": "core",
            "desc": "获取左定位修正值(即计算 border 样式对 left 样式的影响)。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "number", "desc": "左定位修正值"},
            "remark": "opera 等浏览器，offsetLeft 与 left 样式的取值受到了 border 样式的影响，因此，需要使用 calcLeftRevise 方法计算 offsetLeft 与实际的 left 样式之间的修正值。"
        },

        {
            "name": "calcTopRevise",
            "type": "core",
            "desc": "获取上定位修正值(即计算 border 样式对 top 样式的影响)。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "number", "desc": "上定位修正值"},
            "remark": "opera 等浏览器，offsetTop 与 top 样式的取值受到了 border 样式的影响，因此，需要使用 calcTopRevise 方法计算 offsetTop 与实际的 top 样式之间的修正值。"
        },

        {
            "name": "calcWidthRevise",
            "type": "core",
            "desc": "获取宽度修正值(即计算 padding,border 样式对 width 样式的影响)。",
            "params": [
                {"name": "style", "type": "CssStyle", "desc": "CssStyle 对象"}
            ],
            "return": {"type": "number", "desc": "宽度修正值"},
            "remark": "IE 的盒子模型不完全遵守 W3C 标准，因此，需要使用 calcWidthRevise 方法计算 offsetWidth 与实际的 width 样式之间的修正值。"
        },

        {
            "name": "create",
            "type": "core",
            "desc": "创建 {'controls'|menu}。",
            "params": [
                {"name": "type", "type": "Function", "desc": "控件的构造函数"},
                {"name": "options", "type": "Object", "desc": "初始化选项(参见 {'controls'|menu})"}
            ],
            "return": {"type": "ecui.ui.Control", "desc": "{'controls'|menu}"},
            "remark": [
                "标准的创建 {'controls'|menu} 的工厂方法，适用于少量创建控件，生成的控件不需要任何额外的调用即可正常的显示，对于批量创建控件，请使用 {'\\$create'|method:'core'} 方法。options 对象支持的属性如下：",
                "<table class=\"clsSTD\"><tr><td>id</td><td>string，当前控件的 id，提供给 {'\\$connect'|method:'core'} 与 {'get'|method:'core'} 使用</td></tr><tr><td>main</td><td>HTMLElement，与控件绑捆的 Element 对象(参见 {'getMain'|method:'control'} 方法)，如果忽略此参数将创建 Element 对象与控件绑捆</td></tr><tr><td>parent</td><td>ecui.ui.Control 或者 HTMLElement，父控件对象或者父 Element 对象</td></tr><tr><td>type</td><td>string，控件的类型样式，通常情况下省略此参数，使用 \"ec-控件名称\" 作为控件的类型样式</td></tr><tr><td>primary</td><td>string，控件的基本样式(参见 {'getPrimary'|method:'control'} 方法)，有关样式的描述参见 {'styles'|menu}，如果忽略此参数将使用主元素的 className 属性</td></tr></table>"
            ]
        },

        {
            "name": "dispose",
            "type": "core",
            "desc": "释放 {'controls'|menu} 及其子控件占用的内存。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control|HTMLElement", "desc": "需要释放的 {'controls'|menu} 或包含控件的 Element 对象"}
            ]
        },

        {
            "name": "drag",
            "type": "core",
            "desc": "将指定的 {'controls'|menu} 设置为拖拽状态。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "需要进行拖拽的 {'controls'|menu} 对象"},
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"},
                {"name": "range", "type": "Object", "desc": "控件允许拖拽的范围，省略参数时，控件默认只允许在 offsetParent 定义的区域内拖拽，如果 offsetParent 是 body，则只允许在当前浏览器可视范围内拖拽"}
            ],
            "remark": [
                "只有在鼠标左键按下时，才允许调用 drag 方法设置待拖拽的 ECUI 控件，在拖拽操作过程中，将依次触发 {'ondragstart'|event:'control'}、{'ondragmove'|event:'control'} 与 {'ondragend'|event:'control'} 事件。range 参数支持的属性如下：", 
                "<table class=\"clsSTD\"><tr><td>top</td><td>number，控件允许拖拽到的最小Y轴坐标</td></tr><tr><td>right</td><td>number，控件允许拖拽到的最大X轴坐标</td></tr><tr><td>bottom</td><td>number，控件允许拖拽到的最大Y轴坐标</td></tr><tr><td>left</td><td>number，控件允许拖拽到的最小X轴坐标</td></tr></table>"
            ]
        },

        {
            "name": "findControl",
            "type": "core",
            "desc": "从指定的 Element 对象开始，依次向它的父节点查找绑定的 {'controls'|menu}。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "return": {"type": "ecui.ui.Control", "desc": "{'controls'|menu}，如果不能找到，返回 null"},
            "remark": "findControl 方法，会返回从当前 Element 对象开始，依次向它的父 Element 查找到的第一个绑定(参见 {'\\$bind'|method:'core'} 方法)的 {'controls'|menu}。findControl 方法一般在控件创建时使用，用于查找父控件对象。"
        },

        {
            "name": "get",
            "type": "core",
            "desc": "获取指定名称的 {'controls'|menu}。",
            "params": [
                {"name": "id", "type": "string", "desc": "{'controls'|menu} 的名称，通过 Element 对象的初始化选项 id 定义"}
            ],
            "return": {"type": "ecui.ui.Control", "desc": "指定名称的 {'controls'|menu} 对象，如果不存在返回 null"},
            "remark": "使用页面静态初始化或页面动态初始化(参见 {'ecui'|menu})创建的控件，如果在 ecui 属性中指定了 id，就可以通过 get 方法得到控件，也可以在 Element 对象上使用 {'getControl'|method:'core'} 方法。"
        },

        {
            "name": "getActived",
            "type": "core",
            "desc": "获取当前处于激活状态的 {'controls'|menu}。",
            "return": {"type": "ecui.ui.Control", "desc": "处于激活状态的 {'controls'|menu}，如果不存在返回 null"},
            "remark": "激活状态，指鼠标在控件区域左键从按下到弹起的全过程，无论鼠标移动到哪个位置，被激活的控件对象不会发生改变。处于激活状态的控件及其父控件，都具有激活状态样式。"
        },

        {
            "name": "getAttributeName",
            "type": "core",
            "desc": "获取当前的初始化属性名。",
            "return": {"type": "string", "desc": "当前的初始化属性名"},
            "remark": "getAttributeName 方法返回页面静态初始化(参见 {'ecui'|menu})使用的属性名，通过在 BODY 节点的 data-ecui 属性中指定，默认使用 ecui 作为初始化属性名。",
            "example": [
                "<body data-ecui=\"name:ui\">\n  <div ui=\"type:control\"></div>\n</body>"
            ]
        },

        {
            "name": "getControl(Element)",
            "type": "core",
            "desc": "获取当前 Element 对象绑定的 {'controls'|menu}。",
            "syntax": "<i>ecui.ui.Control</i> = <i>HTMLElement.</i><b>getControl(</b><i></i><b>)</b>",
            "return": {"type": "ecui.ui.Control", "desc": "与 Element 对象绑定的 {'controls'|menu}"},
            "remark": "与控件关联的 Element 对象(例如通过 {'init'|method:'core'} 方法初始化，或者使用 {'\\$bind'|method:'core'} 方法绑定，或者使用 {'create'|method:'core'}、{'\\$fastCreate'|method:'core'} 方法生成控件)，会被添加一个 getControl 方法用于获取它绑定的 {'controls'|menu}，更多获取控件的方法参见 {'get'|method:'core'}。"
        },

        {
            "name": "getControl(Event)",
            "type": "core",
            "desc": "获取触发本次事件的 {'controls'|menu}。",
            "syntax": "<i>ecui.ui.Control</i> = <i>Event.</i><b>getControl(</b><i></i><b>)</b>",
            "return": {"type": "ecui.ui.Control", "desc": "触发当前事件的 {'controls'|menu}"}
        },

        {
            "name": "getFocused",
            "type": "core",
            "desc": "获取当前处于焦点状态的控件。",
            "return": {"type": "ecui.ui.Control", "desc": "处于焦点状态的 {'controls'|menu}，如果不存在返回 null"},
            "remark": "焦点状态，默认优先处理键盘/滚轮等特殊事件。处于焦点状态的控件及其父控件，都具有焦点状态样式。通常鼠标左键的点击将使控件获得焦点状态，之前拥有焦点状态的控件将失去焦点状态。"
        },

        {
            "name": "getHovered",
            "type": "core",
            "desc": "获取当前处于悬停状态的控件。",
            "return": {"type": "ecui.ui.Control", "desc": "处于悬停状态的 {'controls'|menu}，如果不存在返回 null"},
            "remark": "悬停状态，指鼠标当前位于控件区域。处于悬停状态的控件及其父控件，都具有悬停状态样式。"
        },

        {
            "name": "getKey",
            "type": "core",
            "desc": "获取当前有效的键值码。",
            "return": {"type": "number", "desc": "键值码"},
            "remark": "getKey 方法返回最近一次 keydown 事件的 keyCode/which 值，用于解决浏览器的 keypress 事件中特殊按键(例如方向键等)没有编码值的问题。"
        },

        {
            "name": "getMouseX",
            "type": "core",
            "desc": "获取当前鼠标光标的页面X轴坐标或相对于控件内部区域的X轴坐标。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}，如果省略参数，将获取鼠标在页面的X轴坐标，否则获取鼠标相对于控件内部区域的X轴坐标"}
            ],
            "return": {"type": "number", "desc": "X轴坐标值"},
            "remark": "getMouseX 方法计算相对于控件内部区域的X轴坐标时，按照浏览器盒子模型的标准，需要减去 Element 对象的 borderLeftWidth 样式的值。"
        },

        {
            "name": "getMouseY",
            "type": "core",
            "desc": "获取当前鼠标光标的页面Y轴坐标或相对于控件内部区域的Y轴坐标。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}，如果省略参数，将获取鼠标在页面的Y轴坐标，否则获取鼠标相对于控件内部区域的Y轴坐标"}
            ],
            "return": {"type": "number", "desc": "Y轴坐标值"},
            "remark": "getMouseY 方法计算相对于控件内部区域的Y轴坐标时，按照浏览器盒子模型的标准，需要减去 Element 对象的 borderTopWidth 样式的值。"
        },

        {
            "name": "getParameters",
            "type": "core",
            "desc": "从 Element 对象中获取初始化选项对象。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"},
                {"name": "attributeName", "type": "string", "desc": "当前的初始化属性名(参见 {'getAttributeName'|method:'core'} 方法)"}
            ],
            "return": {"type": "Object", "desc": "初始化选项对象"}
        },

        {
            "name": "getScrollNarrow",
            "type": "core",
            "desc": "获取浏览器滚动条的厚度。",
            "return": {"type": "number", "desc": "浏览器滚动条相对窄的一边的长度"},
            "remark": "getScrollNarrow 方法对于垂直滚动条，返回的是滚动条的宽度，对于水平滚动条，返回的是滚动条的高度。"
        },

        {
            "name": "getStatus",
            "type": "core",
            "desc": "获取框架当前的状态。",
            "return": {"type": "boolean", "desc": "框架当前的状态"},
            "remark": "getStatus 方法返回框架当前的工作状态，目前支持三类工作状态：NORMAL(正常状态)、ONLOAD(加载状态)与REPAINT(刷新状态)"
        },

        {
            "name": "init",
            "type": "core",
            "desc": "初始化指定的 Element 对象对应的 DOM 节点树。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "remark": [
                "init 方法将初始化指定的 Element 对象及它的子节点，如果这些节点拥有初始化属性(参见 {'getAttributeName'|method:'core'} 方法)，将按照规则为它们绑定 {'controls'|menu}，每一个节点只会被绑定一次，重复的绑定无效。页面加载完成时，将会自动针对 document.body 执行这个方法，相当于自动执行以下的语句：",
                "<pre class=\"clsCode\">ecui.init(document.body)</pre>"
            ]
        },

        {
            "name": "intercept",
            "type": "core",
            "desc": "设置框架拦截之后的一次点击，并将点击事件发送给指定的 {'controls'|menu}。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}"}
            ],
            "remark": "intercept 方法将下一次的鼠标点击事件转给指定控件的 {'\\$intercept'|method:'control'} 方法处理，相当于拦截了一次框架的鼠标事件点击操作，框架其它的状态不会自动改变，例如拥有焦点的控件不会改变。如果 {'\\$intercept'|method:'control'} 方法不返回 false，将自动调用 {'restore'|method:'core'} 方法。"
        },

        {
            "name": "isFixedSize",
            "type": "core",
            "desc": "判断容器大小是否需要修正(即计算 padding, border 样式对 width, height 样式的影响)。",
            "return": {"type": "boolean", "desc": "容器大小是否需要修正"}
        },

        {
            "name": "loseFocus",
            "type": "core",
            "desc": "使控件失去焦点。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}"}
            ],
            "remark": "loseFocus 方法不完全是 {'setFocused'|method:'core'} 方法的逆向行为。如果控件及它的子控件不处于焦点状态，执行 loseFocus 方法不会发生变化。如果控件或它的子控件处于焦点状态，执行 loseFocus 方法将使控件失去焦点状态，如果控件拥有父控件，此时父控件获得焦点状态。"
        },

        {
            "name": "mask",
            "type": "core",
            "desc": "控制用于遮罩整个浏览器可视化区域的层。",
            "syntax": "<i>ecui.</i><b>mask(</b><i>opacity, zIndex</i><b>)</b></pre><pre class=\"clsSyntax\"><i>ecui.</i><b>mask(</b><i>status</i><b>)</b>",
            "params": [
                {"name": "opacity", "type": "number", "desc": "透明度，如 0.5，如果省略参数将关闭遮罩层"},
                {"name": "zIndex", "type": "number", "desc": "遮罩层的 zIndex 样式值，如果省略使用 32767"},
                {"name": "status", "type": "boolean", "desc": "false 表示隐藏整个遮罩层，true 表示显示整个遮罩层"}
            ],
            "remark": "遮罩层的 z-index 样式默认取值为 32767，<font color=\"red\">请不要将 Element 对象的 z-index 样式设置大于 32767</font>。当框架中至少一个遮罩层工作时，body 标签将增加一个样式 ecui-mask，IE6/7 的原生 select 标签可以使用此样式进行隐藏，解决强制置顶的问题。"
        },

        {
            "name": "query",
            "type": "core",
            "desc": "查询满足条件的控件列表。",
            "params": [
                {"name": "condition", "type": "Object", "desc": "查询条件，如果省略将返回全部的控件"}
            ],
            "return": {"type": "Array", "desc": "控件列表"},
            "remark": [
                "query 方法允许按多种条件组合查询满足需要的控件，如果省略条件表示不进行限制。condition 参数对象支持的属性如下：", 
                "<table class=\"clsSTD\"><tr><td>type</td><td>Function，控件的类型构造函数</td></tr><tr><td>parent</td><td>ecui.ui.Control，控件的父控件对象</td></tr><tr><td>custom</td><td>Function，自定义查询函数，传入的参数是控件对象</td></tr></table>"
            ]
        },

        {
            "name": "repaint",
            "type": "core",
            "desc": "重绘浏览器区域的控件。",
            "remark": "repaint 方法在页面改变大小时自动触发，一些特殊情况下，例如包含框架的页面，页面变化时不会触发 onresize 事件，需要手工调用 repaint 函数重绘所有的控件。"
        },

        {
            "name": "restore",
            "type": "core",
            "desc": "恢复当前框架的状态到上一个状态。",
            "remark": "restore 用于恢复调用特殊操作如 {'drag'|method:'core'}、{'intercept'|method:'core'} 与 {'zoom'|method:'core'} 后改变的框架环境，包括各框架事件处理函数的恢复、控件的焦点设置等。"
        },

        {
            "name": "select",
            "type": "core",
            "desc": "将指定的控件设置为选择状态。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}"},
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"},
                {"name": "className", "type": "string", "desc": "选择框的样式名称，如果省略将使用 ec-selector"}
            ],
            "remark": "select 方法将控件设置为选择，显示选择框并对选择框调用 {'zoom'|method:'core'} 方法。调用它会触发控件对象的 {'onselectstart'|event:'control'} 事件，在整个 select 的周期中，还将触发 {'onselect'|event:'control'} 与 {'onselectend'|event:'control'} 事件，在释放鼠标按键时选择操作周期结束。"
        },

        {
            "name": "setFocused",
            "type": "core",
            "desc": "使 {'controls'|menu} 得到焦点。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}"}
            ],
            "remark": "setFocused 方法将指定的控件设置为焦点状态，允许不指定需要获得焦点的控件，则当前处于焦点状态的控件将失去焦点，需要将处于焦点状态的控件失去焦点还可以调用 {'loseFocus'|method:'core'} 方法。<font color=\"red\">需要注意的是，如果控件处于焦点状态，当通过 setFocused 方法设置它的子控件获得焦点状态时，虽然处于焦点状态的控件对象发生了变化，但是控件不会触发 {'onblur'|event:'control'} 方法，此时控件逻辑上仍然处于焦点状态。</font>"
        },

        {
            "name": "wrapperEvent",
            "type": "core",
            "desc": "包装事件对象。",
            "params": [
                {"name": "event", "type": "Event", "desc": "浏览器事件对象"}
            ],
            "return": {"type": "ecui.ui.Event", "desc": "包装后的事件对象"},
            "remark": [
                "wrapperEvent 方法将浏览器产生的鼠标与键盘事件包装并使原生对象符合 W3C 标准。属性如下：",
                "<table class=\"clsSTD\"><tr><td>pageX</td><td>number，鼠标的X轴坐标</td></tr><tr><td>pageY</td><td>number，鼠标的Y轴坐标</td></tr><tr><td>which</td><td>number，触发事件的按键码</td></tr><tr><td>target</td><td>HTMLElement，触发事件的 Element 对象</td></tr><tr><td>returnValue</td><td>boolean，是否进行默认处理</td></tr><tr><td>cancelBubble</td><td>boolean，是否取消冒泡</td></tr><tr><td>getControl</td><td>Function，获取触发事件的 {'controls'|menu} 对象</td></tr><tr><td>getNative</td><td>Function，获取原生的事件对象</td></tr><tr><td>preventDefault</td><td>Function，阻止事件的默认处理</td></tr><tr><td>stopPropagation</td><td>Function，事件停止冒泡</td></tr></table>"
            ]
        },

        {
            "name": "zoom",
            "type": "core",
            "desc": "将指定的 {'controls'|menu} 设置为缩放状态。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}"},
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"},
                {"name": "range", "type": "Object", "desc": "控件允许的缩放范围参数"}
            ],
            "remark": [
                "zoom 方法将控件设置为缩放，缩放的值允许负数，用于表示反向的缩放，调用它会触发控件对象的 {'onzoomstart'|event:'control'} 事件，在整个 zoom 的周期中，还将触发 {'onzoom'|event:'control'} 与 {'onzoomend'|event:'control'} 事件，在释放鼠标按键时缩放操作周期结束。range 参数支持的属性如下：",
                "<table class=\"clsSTD\"><tr><td>minWidth</td><td>number，控件允许缩放的最小宽度</td></tr><tr><td>maxWidth</td><td>number，控件允许缩放的最大宽度</td></tr><tr><td>minHeight</td><td>number，控件允许缩放的最小高度</td></tr><tr><td>maxHeight</td><td>number，控件允许缩放的最大高度</td></tr></table>"
            ]
        }
    ],

    "control": [
        {
            "name": "$activate",
            "type": "control",
            "desc": "控件获得激活事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件获得激活时，添加状态样式 -active。",
            "event": 10
        },

        {
            "name": "$append",
            "type": "control",
            "desc": "控件增加子控件事件的默认处理。",
            "params": [
                {"name": "child", "type": "ecui.ui.Control", "desc": "子控件"}
            ],
            "return": {"type": "boolean", "desc": "如果不允许增加子控件，返回 false"}
        },

        {
            "name": "$blur",
            "type": "control",
            "desc": "控件失去焦点事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件失去焦点时，移除状态样式 -focus。",
            "event": 10
        },

        {
            "name": "$cache",
            "type": "control",
            "desc": "缓存控件的属性。",
            "params": [
                {"name": "style", "type": "CssStyle", "desc": "主元素的 Css 样式对象"},
                {"name": "cacheSize", "type": "boolean", "desc": "是否需要缓存控件的大小，如果控件是另一个控件的部件时，不缓存大小能加快渲染速度，默认缓存"}
            ],
            "remark": "$cache 方法缓存部分控件属性的值，在初始化时避免频繁的读写交替操作，加快渲染的速度，在子控件或者应用程序开发过程中，如果需要避开控件提供的方法直接操作 Element 对象，<font color=\"red\">操作完成后必须调用 {'clearCache'|method:'control'} 方法清除控件的属性缓存，否则将引发错误。</font>"
        },

        {
            "name": "$click",
            "type": "control",
            "desc": "控件点击事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "$deactivate",
            "type": "control",
            "desc": "控件失去激活事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件失去激活时，移除状态样式 -active。",
            "event": 10
        },

        {
            "name": "$dispose",
            "type": "control",
            "desc": "销毁控件的默认处理。",
            "remark": "页面卸载时将销毁所有的控件，释放循环引用，防止在 IE 下发生内存泄漏，$dispose 方法的调用不会受到 {'ondispose'|event:'control'} 事件返回值的影响。"
        },

        {
            "name": "$dragend",
            "type": "control",
            "desc": "控件拖拽结束事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件被拖曳的周期结束时，如果 {'ondragend'|event:'control'} 事件返回值不为 false，则调用 $dragend 方法，详细的描述请参见 {'drag'|method:'core'} 方法。"
        },

        {
            "name": "$dragmove",
            "type": "control",
            "desc": "控件拖拽移动事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"},
                {"name": "x", "type": "number", "desc": "X轴坐标"},
                {"name": "y", "type": "number", "desc": "Y轴坐标"}
            ],
            "return": {"type": "boolean", "desc": "是否自动设置控件新的位置，默认值为 true"},
            "remark": "控件被拖曳的周期中鼠标移动时，如果 {'ondragmove'|event:'control'} 事件返回值不为 false，则调用 $dragmove 方法。如果 $dragmove 方法返回值不为 false，框架将设置控件的位置，详细的描述请参见 {'drag'|method:'core'} 方法。"
        },

        {
            "name": "$dragstart",
            "type": "control",
            "desc": "控件拖拽开始事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件被拖曳的周期开始时，如果 {'ondragstart'|event:'control'} 事件返回值不为 false，则调用 $dragstart 方法，详细的描述请参见 {'drag'|method:'core'} 方法。"
        },

        {
            "name": "$focus",
            "type": "control",
            "desc": "控件获得焦点事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件获得焦点时，添加状态样式 -focus。",
            "event": 10
        },

        {
            "name": "$getBasicHeight",
            "type": "control",
            "desc": "获取控件的基本高度。",
            "return": {"type": "number", "desc": "控件的基本高度"},
            "remark": "控件的基本高度指控件基本区域与用户数据存放区域的高度差值，即主元素与内部元素(如果相同则忽略其中之一)的上下边框宽度(border-width)与上下内填充宽度(padding)之和。"
        },

        {
            "name": "$getBasicWidth",
            "type": "control",
            "desc": "获取控件的基本宽度。",
            "return": {"type": "number", "desc": "控件的基本宽度"},
            "remark": "控件的基本宽度指控件基本区域与用户数据存放区域的宽度差值，即主元素与内部元素(如果相同则忽略其中之一)的左右边框宽度(border-width)与左右内填充宽度(padding)之和。"
        },

        {
            "name": "$getSection",
            "type": "control",
            "desc": "获取指定的部件。",
            "params": [
                {"name": "name", "type": "string", "desc": "部件名称"}
            ],
            "return": {"type": "ecui.ui.Control", "desc": "部件对象"},
            "remark": "$getSection 方法返回控件的一个部件对象，部件对象也是 {'controls'|menu}，是当前控件的组成成份，不可缺少，请不要轻易的对部件对象进行操作。"
        },

        {
            "name": "$hide",
            "type": "control",
            "desc": "隐藏控件。",
            "remark": "$hide 方法直接隐藏控件，控件失去激活、悬停与焦点状态，不检查控件之前的状态，因此不会导致浏览器的刷新操作。"
        },

        {
            "name": "$intercept",
            "type": "control",
            "desc": "强制拦截点击事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "当调用了 {'intercept'|method:'core'} 方法后，下一次对界面的点击将会触发指定控件的 {'onintercept'|event:'control'} 事件，如果事件返回值不为 false，则调用 $intercept 方法。如果 $intercept 方法返回值不为 false，将调用 {'restore'|method:'core'} 方法，否则框架将 {'onmousedown'|event:'control'} 事件传递给上一层环境响应。"
        },

        {
            "name": "$keydown",
            "type": "control",
            "desc": "键盘按下事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "$keypress",
            "type": "control",
            "desc": "键盘按住事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "$keyup",
            "type": "control",
            "desc": "键盘松开事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "$locate",
            "type": "control",
            "desc": "设置控件容器支持坐标定位。",
            "return": {"type": "boolean", "desc": "$locate 方法执行后，容器内部 Element 对象的 offsetParent 将指向主元素(参见 {'getMain'|method:'control'} 方法)"}
        },

        {
            "name": "$mousedown",
            "type": "control",
            "desc": "鼠标键按下事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "$mousemove",
            "type": "control",
            "desc": "鼠标移动事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "$mouseout",
            "type": "control",
            "desc": "鼠标移出事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "鼠标移出控件区域时，控件失去悬停状态，移除状态样式 -hover。",
            "event": 10
        },

        {
            "name": "$mouseover",
            "type": "control",
            "desc": "鼠标移入事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "鼠标移入控件区域时，控件获得悬停状态，添加状态样式 -hover。",
            "event": 10
        },

        {
            "name": "$mouseup",
            "type": "control",
            "desc": "鼠标键松开事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "$mousewheel",
            "type": "control",
            "desc": "鼠标滚轮滚动事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "$ready",
            "type": "control",
            "desc": "页面完全加载完成后的处理。",
            "remark": "浏览器有可能在 window.onload 事件后恢复 input 的值，控件需要在之后进行一些设置工作，相关的设置工作在 $ready 方法中完成。"
        },

        {
            "name": "$remove",
            "type": "control",
            "desc": "控件移除子控件事件的默认处理。",
            "params": [
                {"name": "child", "type": "ecui.ui.Control", "desc": "子控件"}
            ]
        },

        {
            "name": "$resize",
            "type": "control",
            "desc": "控件大小变化事件的默认处理。",
            "event": 1
        },

        {
            "name": "$select",
            "type": "control",
            "desc": "区域选择移动事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件在区域选择周期中鼠标移动时，如果 {'onselect'|event:'control'} 事件返回值不为 false，则调用 $select 方法，详细的描述请参见 {'select'|method:'core'} 方法。"
        },

        {
            "name": "$selectend",
            "type": "control",
            "desc": "区域选择结束事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件在区域选择周期结束时，如果 {'onselectend'|event:'control'} 事件返回值不为 false，则调用 $selectend 方法，详细的描述请参见 {'select'|method:'core'} 方法。"
        },

        {
            "name": "$selectstart",
            "type": "control",
            "desc": "区域选择开始事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件在区域选择周期开始时，如果 {'onselectstart'|event:'control'} 事件返回值不为 false，则调用 $selectstart 方法，详细的描述请参见 {'select'|method:'core'} 方法。"
        },

        {
            "name": "$setBody",
            "type": "control",
            "desc": "设置控件的内层元素。",
            "params": [
                {"name": "el", "type": "HTMLElement", "desc": "Element 对象"}
            ],
            "remark": "{'controls'|menu} 逻辑上分为外层元素、主元素与内层元素，外层元素用于控制控件自身布局，主元素是控件生成时捆绑的 Element 对象，而内层元素用于控制控件对象的子控件与文本布局，三者允许是同一个 Element 对象。"
        },

        {
            "name": "$setParent",
            "type": "control",
            "desc": "直接设置父控件。",
            "params": [
                {"name": "parent", "type": "ecui.ui.Control", "desc": "{'controls'|menu}"}
            ],
            "remark": "相对于 {'setParent'|method:'control'} 方法，$setParent 方法仅设置控件对象逻辑上的父对象，不进行任何逻辑上的检查，用于某些特殊情况下的设定，如 {'select'|control} 中的选项框子控件需要使用 $setParent 方法设置它的逻辑父控件为下拉框控件。"
        },

        {
            "name": "$setSize",
            "type": "control",
            "desc": "设置控件的大小。",
            "params": [
                {"name": "width", "type": "number", "desc": "宽度，如果不需要设置则将参数设置为等价于逻辑非的值"},
                {"name": "height", "type": "number", "desc": "高度，如果不需要设置则省略此参数"}
            ]
        },

        {
            "name": "$show",
            "type": "control",
            "desc": "显示控件。",
            "remark": "$show 方法直接显示控件，不检查控件之前的状态，因此不会导致浏览器的刷新操作。"
        },

        {
            "name": "$zoom",
            "type": "control",
            "desc": "控件缩放移动事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "return": {"type": "boolean", "desc": "是否自动设置控件新的大小，默认值为 true"},
            "remark": "控件在缩放周期中鼠标移动时，如果 {'onzoom'|event:'control'} 事件返回值不为 false，则调用 $zoom 方法。如果 $zoom 方法返回值不为 false，框架将设置控件的大小，详细的描述请参见 {'zoom'|method:'core'} 方法。"
        },

        {
            "name": "$zoomend",
            "type": "control",
            "desc": "控件缩放结束事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件在缩放周期结束时，如果 {'onzoomend'|event:'control'} 事件返回值不为 false，则调用 $zoomend 方法，详细的描述请参见 {'zoom'|method:'core'} 方法。"
        },

        {
            "name": "$zoomstart",
            "type": "control",
            "desc": "控件缩放开始事件的默认处理。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "控件在缩放周期开始时，如果 {'onzoomstart'|event:'control'} 事件返回值不为 false，则调用 $zoomstart 方法，详细的描述请参见 {'zoom'|method:'core'} 方法。"
        },

        {
            "name": "activate",
            "type": "control",
            "desc": "控件获得激活。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "activate 方法不会导致控件获得激活状态，只是添加控件的激活状态样式。",
            "event": 10
        },

        {
            "name": "alterClass",
            "type": "control",
            "desc": "为控件添加/移除一个扩展样式。",
            "params": [
                {"name": "className", "type": "string", "desc": "扩展样式名，以+号开头表示添加扩展样式，以-号开头表示移除扩展样式"}
            ],
            "remark": "扩展样式分别附加在类型样式与当前样式之后(参见 {'getType'|method:'control'} 与 {'getPrimary'|method:'control'} 方法)，使用-号进行分隔。如果类型样式为 ec-control，当前样式为 demo，扩展样式 hover 后，控件主元素将存在四个样式，分别为 ec-control、demo、ec-control-hover 与 demo-hover。"
        },

        {
            "name": "blur",
            "type": "control",
            "desc": "控件失去焦点。",
            "remark": "blur 方法不会导致控件失去焦点状态，只是移除控件的焦点状态样式，如果需要使控件失去焦点，请使用 {'loseFocus'|method:'core'} 或 {'setFocused'|method:'core'} 方法。",
            "event": 10
        },

        {
            "name": "cache",
            "type": "control",
            "desc": "缓存控件的属性。",
            "params": [
                {"name": "cacheSize", "type": "boolean", "desc": "是否需要缓存控件的大小，如果控件是另一个控件的部件时，不缓存大小能加快渲染速度，默认缓存"},
                {"name": "force", "type": "boolean", "desc": "是否需要强制刷新缓存，相当于之前执行了 {'clearCache'|method:'control'} 方法，默认不强制刷新"}
            ],
            "remark": "cache 方法验证控件是否已经缓存，如果未缓存将调用 {'\\$cache'|method:'control'} 方法缓存控件属性的值。在子控件或者应用程序开发过程中，如果需要避开控件提供的方法直接操作 Element 对象，<font color=\"red\">操作完成后必须调用 {'clearCache'|method:'control'} 方法清除控件的属性缓存，否则将引发错误。</font>"
        },

        {
            "name": "clearCache",
            "type": "control",
            "desc": "清除控件的缓存。",
            "remark": "在子控件或者应用程序开发过程中，如果需要避开控件提供的方法直接操作 Element 对象，操作完成后必须调用 clearCache 方法清除控件的属性缓存，否则将引发错误。"
        },

        {
            "name": "click",
            "type": "control",
            "desc": "控件点击。",
            "event": 10
        },

        {
            "name": "contain",
            "type": "control",
            "desc": "判断是否包含指定的控件。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "{'controls'|menu}"}],
            "return": {"type": "boolean", "desc": "是否包含指定的控件"},
            "remark": "contain 方法判断指定的控件是否逻辑上属于当前控件的内部区域，即当前控件是指定的控件的某一级父控件。"
        },

        {
            "name": "deactivate",
            "type": "control",
            "desc": "控件失去激活。",
            "params": [
                {"name": "event", "type": "ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "deactivate 方法不会导致控件失去激活状态，只是移除控件的激活状态样式。",
            "event": 10
        },

        {
            "name": "disable",
            "type": "control",
            "desc": "控件获得失效状态。",
            "return": {"type": "boolean", "desc": "控件失效状态是否变化"},
            "remark": "控件获得失效状态时，添加状态样式 -disabled(参见 alterClass 方法)。disable 方法导致控件失去激活、悬停、焦点状态，所有子控件的 {'isDisabled'|method:'control'} 方法返回 true，但不会设置子控件的失效状态样式。"
        },

        {
            "name": "dispose",
            "type": "control",
            "desc": "销毁控件。",
            "remark": "dispose 方法销毁控件及其所有的子控件，相当于调用 ecui.{'dispose'|method:'core'}(this) 方法。"
        },

        {
            "name": "enable",
            "type": "control",
            "desc": "控件解除失效状态。",
            "return": {"type": "boolean", "desc": "控件失效状态是否变化"},
            "remark": "控件解除失效状态时，移除状态样式 -disabled(参见 alterClass 方法)。enable 方法仅解除控件自身的失效状态，如果其父控件失效，{'isDisabled'|method:'control'} 方法返回 true。"
        },

        {
            "name": "focus",
            "type": "control",
            "desc": "控件获得焦点。",
            "remark": "focus 方法不会导致控件获得焦点状态，只是添加控件的焦点状态样式，如果需要使控件获得焦点，请使用 {'setFocused'|method:'core'} 方法。",
            "event": 10
        },

        {
            "name": "getMain",
            "type": "control",
            "desc": "获取控件的主元素。",
            "return": {"type": "HTMLElement", "desc": "Element 对象"},
            "remark": "getMain 方法返回控件生成时定义的 Element 对象(参见 {'create'|method:'core'} 方法)。"
        },

        {
            "name": "getPrimary",
            "type": "control",
            "desc": "获取控件的基本样式。",
            "return": {"type": "string", "desc": "控件的基本样式"},
            "remark": "getPrimary 方法返回控件生成时指定的 primary 参数(参见 {'create'|method:'core'} 方法)。基本样式与通过 {'getClass'|method:'control'} 方法返回的当前样式存在区别，在控件生成初期，当前样式等于基本样式，基本样式在初始化后无法改变，{'setClass'|method:'control'} 方法改变当前样式。"
        },

        {
            "name": "getBody",
            "type": "control",
            "desc": "获取控件的内层元素。",
            "return": {"type": "HTMLElement", "desc": "Element 对象"},
            "remark": "getBody 方法返回用于控制子控件与文本布局的内层元素。"
        },

        {
            "name": "getBodyHeight",
            "type": "control",
            "desc": "获取控件内层可使用区域的高度。",
            "return": {"type": "number", "desc": "控件内层可使用区域的高度"},
            "remark": "getBodyHeight 方法返回能被子控件与文本填充的控件区域高度，相当于盒子模型的 content 区域的高度。"
        },

        {
            "name": "getBodyWidth",
            "type": "control",
            "desc": "获取控件内层可使用区域的宽度。",
            "return": {"type": "number", "desc": "控件内层可使用区域的宽度。"},
            "remark": "getBodyWidth 方法返回能被子控件与文本填充的控件区域宽度，相当于盒子模型的 content 区域的宽度。"
        },

        {
            "name": "getClass",
            "type": "control",
            "desc": "获取控件的当前样式。",
            "return": {"type": "string", "desc": "控件的当前样式"},
            "remark": "getClass 方法返回控件当前使用的样式，扩展样式分别附加在类型样式与当前样式之后，从而实现控件的状态样式改变，详细的描述请参见 {'alterClass'|method:'control'} 方法。当前样式与 {'getPrimary'|method:'control'} 方法返回的基本样式存在区别，在控件生成初期，当前样式等于基本样式，基本样式在初始化后无法改变，{'setClass'|method:'control'} 方法改变当前样式。"
        },

        {
            "name": "getContent",
            "type": "control",
            "return": {"type": "string", "desc": "html 片断"},
            "desc": "获取控件的内容。"
        },

        {
            "name": "getHeight",
            "type": "control",
            "return": {"type": "number", "desc": "控件的高度"},
            "desc": "获取控件区域的高度。"
        },

        {
            "name": "getMinimumHeight",
            "type": "control",
            "desc": "获取控件的最小高度。",
            "return": {"type": "number", "desc": "控件的最小高度"},
            "remark": "{'setSize'|method:'control'} 方法不允许设置小于 getMinimumHeight 方法返回的高度值。"
        },

        {
            "name": "getMinimumWidth",
            "type": "control",
            "desc": "获取控件的最小宽度。",
            "return": {"type": "number", "desc": "控件的最小宽度"},
            "remark": "{'setSize'|method:'control'} 方法不允许设置小于 getMinimumWidth 方法返回的宽度值。"
        },

        {
            "name": "getOuter",
            "type": "control",
            "desc": "获取控件的外层元素。",
            "return": {"type": "HTMLElement", "desc": "Element 对象"},
            "remark": "getOuter 方法返回用于控制控件自身布局的外层元素。"
        },

        {
            "name": "getParent",
            "type": "control",
            "desc": "获取父控件。",
            "return": {"type": "ecui.ui.Control", "desc": "父控件对象"},
            "remark": "控件接收的事件将向父控件冒泡处理，getParent 返回的结果是 ECUI 的逻辑父控件，父控件与子控件不一定存在 DOM 树层面的父子级关系。"
        },

        {
            "name": "getType",
            "type": "control",
            "desc": "获取控件的类型样式。",
            "return": {"type": "string", "desc": "控件的类型样式"},
            "remark": "getType 方法返回控件生成时指定的 type 参数(参见 {'create'|method:'core'} 方法)。扩展样式分别附加在类型样式与当前样式之后，从而实现控件的状态样式改变，详细的描述请参见 {'alterClass'|method:'control'} 方法。类型样式不可以改变。"
        },

        {
            "name": "getUID",
            "type": "control",
            "desc": "获取控件的内部唯一标识符。",
            "return": {"type": "string", "desc": "控件 ID"},
            "remark": "getUID 方法返回的 ID 不是初始化选项中指定的 id，而是框架为每个控件生成的内部唯一标识符。"
        },

        {
            "name": "getWidth",
            "type": "control",
            "desc": "获取控件区域的宽度。",
            "return": {"type": "number", "desc": "控件的宽度"}
        },

        {
            "name": "getX",
            "type": "control",
            "desc": "获取控件的相对X轴坐标。",
            "return": {"type": "number", "desc": "X轴坐标"},
            "remark": "getX 方法返回控件的外层元素的 offsetLeft 属性值。如果需要得到控件相对于整个文档的X轴坐标，请调用 {'getOuter'|method:'control'} 方法获得外层元素，然后调用 DOM 的相关函数计算(例如 ecui.dom.getPosition)。"
        },

        {
            "name": "getY",
            "type": "control",
            "desc": "获取控件的相对Y轴坐标。",
            "return": {"type": "number", "desc": "Y轴坐标"},
            "remark": "getY 方法返回控件的外层元素的 offsetTop 属性值。如果需要得到控件相对于整个文档的Y轴坐标，请调用 {'getOuter'|method:'control'} 方法获得外层元素，然后调用 DOM 的相关函数计算(例如 ecui.dom.getPosition)。"
        },

        {
            "name": "hide",
            "type": "control",
            "desc": "隐藏控件。",
            "remark": "如果控件处于显示状态，调用 hide 方法会触发 {'onhide'|event:'control'} 事件，控件转为隐藏状态，并且控件会自动失去激活、悬停与焦点状态。如果控件已经处于隐藏状态，则不执行任何操作。"
        },

        {
            "name": "init",
            "type": "control",
            "desc": "控件初始化。",
            "remark": "init 方法在控件缓存读取后调用，有关控件生成的完整过程描述请参见 {'control'|control}。"
        },

        {
            "name": "isActived",
            "type": "control",
            "desc": "判断控件是否处于激活状态。",
            "return": {"type": "boolean", "desc": "控件是否处于激活状态"}
        },

        {
            "name": "isCapturable",
            "type": "control",
            "desc": "判断是否响应浏览器事件。",
            "return": {"type": "boolean", "desc": "控件是否响应浏览器事件"},
            "remark": "控件不响应浏览器事件时，相应的事件由父控件进行处理。"
        },

        {
            "name": "isDisabled",
            "type": "control",
            "desc": "判断控件是否处于失效状态。",
            "return": {"type": "boolean", "desc": "控件是否失效"},
            "remark": "控件是否处于失效状态，影响控件是否处理事件，它受到父控件的失效状态的影响。可以通过 {'enable'|method:'control'} 与 {'disable'|method:'control'} 方法改变控件的失效状态，如果控件失效，它所有的子控件也会失效。"
        },

        {
            "name": "isFocusable",
            "type": "control",
            "desc": "判断是否允许获取焦点。",
            "return": {"type": "boolean", "desc": "控件是否允许获取焦点"},
            "remark": "控件不允许获得焦点时，被点击时不会改变当前处于焦点状态的控件，但此时控件拥有框架事件响应的最高优先级。"
        },

        {
            "name": "isFocused",
            "type": "control",
            "desc": "判断控件是否处于焦点状态。",
            "return": {"type": "boolean", "desc": "控件是否处于焦点状态"}
        },

        {
            "name": "isHovered",
            "type": "control",
            "desc": "判断控件是否处于悬停状态。",
            "return": {"type": "boolean", "desc": "控件是否处于悬停状态"}
        },

        {
            "name": "isShow",
            "type": "control",
            "desc": "判断是否处于显示状态。",
            "return": {"type": "boolean", "desc": "控件是否显示"}
        },

        {
            "name": "isUserSelect",
            "type": "control",
            "desc": "判断是否允许选中内容。",
            "return": {"type": "boolean", "desc": "控件是否允许选中内容"}
        },

        {
            "name": "keydown",
            "type": "control",
            "desc": "键盘按下。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "keypress",
            "type": "control",
            "desc": "键盘按住。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "keyup",
            "type": "control",
            "desc": "键盘松开。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "mousedown",
            "type": "control",
            "desc": "鼠标键按下。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "remark": "mousedown 不会改变控件的激活与焦点状态。",
            "event": 10
        },

        {
            "name": "mousemove",
            "type": "control",
            "desc": "鼠标移动。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "mouseout",
            "type": "control",
            "desc": "鼠标移出。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "mouseover",
            "type": "control",
            "desc": "鼠标移入。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "mouseup",
            "type": "control",
            "desc": "鼠标键松开。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "mousewheel",
            "type": "control",
            "desc": "鼠标滚轮滚动。",
            "params": [
                {"name": "event", "type":"ecui.ui.Event", "desc": "事件对象"}
            ],
            "event": 10
        },

        {
            "name": "render",
            "type": "control",
            "desc": "控件完全刷新。",
            "remark": "对于存在数据源的控件，render 方法根据数据源重新填充控件内容，重新计算控件的大小进行完全的重绘，render 方法不会触发 {'onresize'|event:'control'} 事件。"
        },

        {
            "name": "repaint",
            "type": "control",
            "desc": "控件刷新。",
            "remark": "repaint 方法不改变控件的内容与大小进行重绘。控件如果生成后不位于文档 DOM 树中，样式无法被正常读取，控件显示后如果不是预期的效果，需要调用 repaint 方法刷新。"
        },

        {
            "name": "resize",
            "type": "control",
            "desc": "控件重置大小并刷新。",
            "remark": "resize 方法重新计算并设置控件的大小，resize 方法触发 {'onresize'|event:'control'} 事件，如果事件返回值不为 false，则调用 {'\\$resize'|method:'control'} 方法按默认的方式重绘控件。因为浏览器可视化区域发生变化时，可能需要改变控件大小，框架会自动调用控件的 resize 方法。"
        },

        {
            "name": "setBodySize",
            "type": "control",
            "params": [
                {"name": "width", "type": "number", "desc": "宽度"},
                {"name": "height", "type": "number", "desc": "高度"}
            ],
            "desc": "设置控件可使用区域的大小。"
        },

        {
            "name": "setClass",
            "type": "control",
            "desc": "设置控件的当前样式。",
            "params": [
                {"name": "currClass", "type": "string", "desc": "控件的当前样式名称"}
            ],
            "remark": "setClass 方法改变控件的当前样式，扩展样式分别附加在类型样式与当前样式之后，从而实现控件的状态样式改变，详细的描述请参见 alterClass 方法。控件的当前样式通过 {'getClass'|method:'control'} 方法获取。"
        },

        {
            "name": "setContent",
            "type": "control",
            "params": [
                {"name": "html", "type": "string", "desc": "HTML 片断"}
            ],
            "desc": "设置控件的内容。"
        },

        {
            "name": "appendTo",
            "type": "control",
            "desc": "将控件添加到页面元素中。",
            "params": [
                {"name": "parentElement", "type": "HTMLElement", "desc": "父 Element 对象，忽略参数控件将移出 DOM 树"}
            ],
            "remark": "appendTo 方法设置父元素，并使用 {'findControl'|method:'core'} 查找父控件对象。如果父控件发生变化，原有的父控件若存在，将触发移除子控件事件({'onremove'|event:'control'})，并解除控件与原有父控件的关联，新的父控件若存在，将触发添加子控件事件({'onappend'|event:'control'})，如果此事件返回 false，添加失败，相当于忽略 parentElement 参数。"
        },

        {
            "name": "setParent",
            "type": "control",
            "desc": "设置当前控件的父控件。",
            "params": [
                {"name": "parent", "type": "ecui.ui.Control", "desc": "父控件对象，忽略参数控件将移出 DOM 树"}
            ],
            "remark": "setParent 方法设置父控件，将当前控件挂接到父控件对象的内层元素中。如果父控件发生变化，原有的父控件若存在，将触发移除子控件事件({'onremove'|event:'control'})，并解除控件与原有父控件的关联，新的父控件若存在，将触发添加子控件事件({'onappend'|event:'control'})，如果此事件返回 false，添加失败，相当于忽略 parent 参数。"
        },

        {
            "name": "setPosition",
            "type": "control",
            "desc": "设置控件的坐标。",
            "params": [
                {"name": "x", "type": "number", "desc": "控件的X轴坐标"},
                {"name": "y", "type": "number", "desc": "控件的Y轴坐标"}
            ],
            "remark": "setPosition 方法设置的是控件的 left 与 top 样式，受到 position 样式的影响。"
        },

        {
            "name": "setSize",
            "type": "control",
            "desc": "设置控件的大小。",
            "params": [
                {"name": "width", "type": "number", "desc": "控件的宽度"},
                {"name": "height", "type": "number", "desc": "控件的高度"}
            ],
            "remark": "需要设置的控件大小如果低于控件允许的最小值，将忽略对应的宽度或高度的设置。"
        },

        {
            "name": "show",
            "type": "control",
            "desc": "显示控件。",
            "remark": "如果控件处于隐藏状态，调用 show 方法会触发 {'onshow'|event:'control'} 事件，控件转为显示状态。如果控件已经处于显示状态，则不执行任何操作。"
        }
    ],

    "input-control": [
        {
            "name": "$reset",
            "type": "input-control",
            "desc": "输入重置事件的默认处理。",
            "params": [
                {"name": "event", "type": "Event", "desc": "事件对象"}
            ]
        },

        {
            "name": "$submit",
            "type": "input-control",
            "desc": "输入提交事件的默认处理。",
            "params": [
                {"name": "event", "type": "Event", "desc": "事件对象"}
            ]
        },

        {
            "name": "disable",
            "type": "input-control",
            "desc": "控件获得失效状态。",
            "return": {"type": "boolean", "desc": "控件失效状态是否变化"},
            "remark": [
                "控件获得失效状态时，添加状态样式 -disabled(参见 alterClass 方法)。disable 方法导致控件失去激活、悬停、焦点状态，所有子控件的 {'isDisabled'|method:'control'} 方法返回 true，但不会设置子控件的失效状态样式。",
                "输入控件获得失效需要设置输入框不提交。"
            ]
        },

        {
            "name": "enable",
            "type": "input-control",
            "desc": "控件解除失效状态。",
            "return": {"type": "boolean", "desc": "控件失效状态是否变化"},
            "remark": [
                "控件解除失效状态时，移除状态样式 -disabled(参见 alterClass 方法)。enable 方法仅解除控件自身的失效状态，如果其父控件失效，{'isDisabled'|method:'control'} 方法返回 true。",
                "输入控件解除失效需要设置输入框可提交。"
            ]
        },

        {
            "name": "getInput",
            "type": "input-control",
            "desc": "获取控件的输入元素。",
            "return": {"type": "HTMLElement", "desc": "InputElement 对象"}
        },

        {
            "name": "getName",
            "type": "input-control",
            "desc": "获取控件的名称。",
            "return": {"type": "string", "desc": "表单项名称"},
            "remark": "输入控件可以在表单中被提交，getName 方法返回提交时用的表单项名称，表单项名称可以使用 {'setName'|method:'input-control'} 方法改变。"
        },

        {
            "name": "getSelectionEnd",
            "type": "input-control",
            "desc": "获取当前选区的结束位置。",
            "return": {"type": "number", "desc": "输入框当前选区的结束位置"}
        },

        {
            "name": "getSelectionStart",
            "type": "input-control",
            "desc": "获取当前选区的起始位置。",
            "return": {"type": "number", "desc": "输入框当前选区的起始位置，即输入框当前光标的位置"}
        },

        {
            "name": "getValue",
            "type": "input-control",
            "desc": "获取控件的值。",
            "return": {"type": "string", "desc": "控件的值"},
            "remark": "getValue 方法返回提交时表单项的值，使用 {'setValue'|method:'input-control'} 方法设置。"
        },

        {
            "name": "setCaret",
            "type": "input-control",
            "desc": "设置输入框光标的位置。",
            "params": [
                {"name": "pos", "type": "number", "desc": "位置索引"}
            ]
        },

        {
            "name": "setName",
            "type": "input-control",
            "desc": "设置控件的名称。",
            "params": [
                {"name": "name", "type": "string", "desc": "表单项名称"}
            ],
            "remark": "输入控件可以在表单中被提交，setName 方法设置提交时用的表单项名称，表单项名称可以使用 {'getName'|method:'input-control'} 方法获取。"
        },

        {
            "name": "setValue",
            "type": "input-control",
            "desc": "设置控件的值。",
            "params": [
                {"name": "value", "type": "string", "desc": "控件的值"}
            ],
            "remark": "setValue 方法设置提交时表单项的值，使用 {'getValue'|method:'input-control'} 方法获取设置的值。"
        }
    ],

    "button": [
        {
            "name": "$mouseout",
            "type": "button",
            "remark": "鼠标移出控件区域时，控件失去悬停状态，移除状态样式 -hover，如果控件处于激活状态，移除状态样式 -active，移除状态样式不失去激活状态。"
        },

        {
            "name": "$mouseover",
            "type": "button",
            "remark": "鼠标移入控件区域时，控件获得悬停状态，添加状态样式 -hover，如果控件处于激活状态，添加状态样式 -active。"
        },

        {
            "name": "setText",
            "type": "button",
            "desc": "设置控件的文字。",
            "params": [
                {"name": "text", "type": "string", "desc": "控件的文字"}
            ]
        }
    ],

    "scroll": [
        {
            "name": "$allowNext",
            "type": "scroll",
            "desc": "判断是否允许当前值向最大值方向移动。",
            "return": {"type": "boolean", "desc": "判断是否允许向最大值方向移动"},
            "remark": "受当前鼠标位置的影响，在当前值向最大值方向移动的过程中需要先判断移动是否得到许可。"
        },

        {
            "name": "$allowPrev",
            "type": "scroll",
            "desc": "判断是否允许当前值向0方向移动。",
            "return": {"type": "boolean", "desc": "判断是否允许向0方向移动"},
            "remark": "受当前鼠标位置的影响，在当前值向0方向移动的过程中需要先判断移动是否得到许可。"
        },

        {
            "name": "$calcDragValue",
            "type": "scroll",
            "desc": "计算滑动块拖拽时滚动条的当前值。",
            "params": [
                {"name": "x", "type": "number", "desc": "滑动块实际到达的X轴坐标"},
                {"name": "y", "type": "number", "desc": "滑动块实际到达的Y轴坐标"}
            ],
            "remark": "虚方法，继承自滚动条控件的控件必须实现。"
        },

        {
            "name": "$create",
            "type": "scroll",
            "params": [
                {"name": "cacheSize", "type": "boolean", "desc": "是否需要缓存控件的大小，如果控件是另一个控件的部件时，不缓存大小能加快渲染速度，默认缓存"}
            ],
            "remark": "滚动条控件建立完成后不进行任何处理。"
        },

        {
            "name": "$flush",
            "type": "scroll",
            "desc": "滚动条控件刷新。",
            "remark": "滚动条控件的大小，最大值/当前值发生变化时，调用 $flash 方法刷新滑动块的大小与位置。"
        },

        {
            "name": "$getPageStep",
            "type": "scroll",
            "desc": "获取一页的步长。",
            "return": {"type": "number", "desc": "一页的步长"},
            "remark": "$getPageStep 方法根据 {'getStep'|method:'scroll'} 方法获取的步长，计算父控件一页的步长的大小，一页的步长一定是滚动条控件步长的整数倍。"
        },

        {
            "name": "$pressend",
            "type": "scroll",
            "remark": "鼠标左键按压控件结束时停止自动滚动，恢复控件状态。"
        },

        {
            "name": "$pressout",
            "type": "scroll",
            "remark": "控件按压状态中鼠标移出控件区域时停止自动滚动，恢复控件状态。"
        },

        {
            "name": "$pressover",
            "type": "scroll",
            "remark": "控件按压状态中鼠标移入控件区域开始自动滚动。"
        },

        {
            "name": "$pressstart",
            "type": "scroll",
            "remark": "鼠标左键按压控件开始时计算自动滚动的方向，并开始自动滚动。"
        },

        {
            "name": "$setPageStep",
            "type": "scroll",
            "desc": "设置滚动条控件的单页滚动距离。",
            "params": [
                {"name": "value", "type": "number", "desc": "单页滚动距离"}
            ]
        },

        {
            "name": "$setValue",
            "type": "scroll",
            "desc": "直接设置控件的当前值。",
            "params": [
                {"name": "value", "type": "number", "desc": "控件的当前值"}
            ],
            "remark": "$setValue 仅仅设置控件的参数值，不进行合法性验证，也不改变滑动块的位置信息，用于滑动块滚动时同步设置当前值。"
        },

        {
            "name": "focus",
            "type": "scroll",
            "desc": "父控件获取焦点。",
            "remark": "在父控件没有焦点时，focus 方法将焦点设置到父控件上。"
        },

        {
            "name": "getStep",
            "type": "scroll",
            "desc": "获取滚动条控件的单次滚动距离。",
            "return": {"type": "number", "desc": "单次滚动距离"},
            "remark": "getStep 方法返回滚动条控件发生滚动时，移动的最小步长值，通过 {'setStep'|method:'scroll'} 设置。"
        },

        {
            "name": "getTotal",
            "type": "scroll",
            "desc": "获取滚动条控件的最大值。",
            "return": {"type": "number", "desc": "控件的最大值"},
            "remark": "getTotal 方法返回滚动条控件允许滚动的最大值，最大值、当前值与滑动块控件的实际位置互相影响，通过 {'setTotal'|method:'scroll'} 设置。"
        },

        {
            "name": "getValue",
            "type": "scroll",
            "desc": "获取滚动条控件的当前值。",
            "return": {"type": "number", "desc": "控件的当前值"},
            "remark": "getValue 方法返回滚动条控件的当前值，最大值、当前值与滑动块控件的实际位置互相影响，但是当前值不允许超过最大值，通过 {'setValue'|method:'scroll'} 方法设置。"
        },

        {
            "name": "hide",
            "type": "scroll",
            "remark": "隐藏滚动条控件时，滚动条控件的当前值需要复位为0，参见 {'setValue'|method:'scroll'} 与 {'setTotal'|method:'scroll'} 方法。"
        },

        {
            "name": "scroll",
            "type": "scroll",
            "desc": "滚动条滚动。",
            "remark": "scroll 方法首先调用 {'change'|method:'scroll'} 方法，之后触发父控件的 {'onscroll'|event:'control'} 事件，如果事件返回值不为 false，则调用父控件的 {'\\$scroll'|method:'control'} 方法。"
        },

        {
            "name": "setStep",
            "type": "scroll",
            "desc": "设置滚动条控件的单次滚动距离。",
            "params": [
                {"name": "value", "type": "number", "desc": "单次滚动距离"}
            ],
            "remark": "setStep 方法设置的值必须大于0，否则不会进行操作。"
        },

        {
            "name": "setTotal",
            "type": "scroll",
            "desc": "设置滚动条控件的最大值。",
            "params": [
                {"name": "value", "type": "number", "desc": "控件的最大值"}
            ],
            "remark": "setTotal 方法设置的值不能为负数，并且当前值如果大于最大值，将改变当前值，并调用 {'scroll'|method:'scroll'} 方法，最大值发生改变将导致滚动条控件刷新。"
        },

        {
            "name": "setValue",
            "type": "scroll",
            "desc": "设置滚动条控件的当前值。",
            "params": [{"name": "value", "desc": "控件的当前值"}],
            "remark": "setValue 方法设置的值不能为负数，也不允许超过使用 {'setTotal'|method:'scroll'} 方法设置的控件的最大值，如果当前值不合法，将自动设置为最接近合法值的数值，如果当前值发生改变将导致滚动条控件刷新，并调用 {'scroll'|method:'scroll'} 方法。"
        },

        {
            "name": "skip",
            "type": "scroll",
            "desc": "滚动条控件当前值移动指定的步长次数。",
            "params": [
                {"name": "n", "type": "number", "desc": "移动的步长次数"}
            ],
            "remark": "参数 value 必须是整数, 正数则向最大值方向移动，负数则向0方向移动，允许移动的区间在0-最大值之间，参见 {'setStep'|method:'scroll'}、{'setTotal'|method:'scroll'} 与 {'setValue'|method:'scroll'} 方法。"
        }
    ],

    "panel": [
        {
            "name": "$keydown",
            "type": "panel",
            "remark": "接管方向键的处理，可显示区域随按键进行上下左右的移动。"
        },

        {
            "name": "$keypress",
            "type": "panel",
            "remark": "Opera 下仅用 keydown 不能屏蔽方向键事件，还需要在 keypress 中屏蔽。"
        },

        {
            "name": "$mousewheel",
            "type": "panel",
            "remark": "如果有垂直滚动条，则垂直滚动条随滚轮滚动。"
        },

        {
            "name": "$scroll",
            "type": "control",
            "desc": "滚动条滚动事件的默认处理。",
            "remark": "如果控件包含滚动条，滚动条滚动时触发 {'onscroll'|event:'control'} 事件，如果事件返回值不为 false，则调用 $scroll 方法。"
        },

        {
            "name": "getScrollLeft",
            "type": "panel",
            "desc": "获取水平滚动条的当前值。",
            "return": {"type": "number", "desc": "水平滚动条的当前值，如果没有水平滚动条返回-1"},
            "remark": "getScrollLeft 方法提供了对水平滚动条当前值的快捷访问方式，参见 {'getValue'|method:'scroll'} 方法。"
        },

        {
            "name": "getScrollTop",
            "type": "panel",
            "desc": "获取垂直滚动条的当前值。",
            "return": {"type": "number", "desc": "垂直滚动条的当前值，如果没有垂直滚动条返回-1"},
            "remark": "getScrollTop 方法提供了对水平滚动条当前值的快捷访问方式，参见 {'getValue'|method:'scroll'} 方法。"
        }
    ],

    "item": [
        {
            "name": "$mousedown",
            "type": "item",
            "remark": "阻止 DOM 文本选中操作。"
        },

        {
            "name": "alterClass",
            "type": "item",
            "remark": "选项控件改变样式后需要自动恢复原来的大小。"
        }
    ],

    "items": [
        {
            "name": "$alterItems",
            "type": "items",
            "desc": "选项控件发生变化的处理。",
            "remark": "在 {'items'|control} 中，选项控件发生增加/减少操作时调用此方法。"
        },

        {
            "name": "$append",
            "type": "items",
            "desc": "控件增加子控件事件的默认处理。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "子控件"}
            ],
            "return": {"type": "boolean", "desc": "如果不允许增加子控件，返回 false"},
            "remark": "选项组增加子选项时需要判断子控件的类型，并额外添加引用。"
        },

        {
            "name": "$initItems",
            "type": "items",
            "desc": "初始化选项组对应的 Element 对象。",
            "remark": "实现了 Items 接口的类在初始化时需要调用 $initItems 方法自动生成选项控件，$initItems 方法保证一个控件对象只允许被调用一次，多次的调用无效。",
            "example": [
                "<body><div id=\"ctrl1\" class=\"ctrl1\" ecui=\"type:control;id:ctrl1\"></div></body>",
                "var oDiv = document.createElement(\"div\");\ndocument.body.appendChild(oDiv);\noDiv.innerHTML = '<div id=\"ctrl2\" class=\"ctrl2\" ecui=\"type:control;id:ctrl2\"></div>';\necui.init(oDiv);"
            ]
        },

        {
            "name": "$remove",
            "type": "items",
            "desc": "控件移除子控件事件的默认处理。",
            "params": [
                {"name": "item", "type": "ecui.ui.Item", "desc": "选项控件"}
            ],
            "remark": "选项组移除子选项时需要额外移除引用。"
        },

        {
            "name": "$setActived",
            "type": "items",
            "desc": "设置激活的选项。",
            "params": [
                {"name": "item", "type": "ecui.ui.Item", "desc": "选项控件"}
            ],
            "remark": "$setActived 方法改变选项组控件中当前激活项的效果。"
        },

        {
            "name": "add",
            "type": "items",
            "desc": "添加子选项控件。",
            "params": [
                {"name": "item", "type": "string|HTMLElement|ecui.ui.Item", "desc": "控件的 html 内容/控件对应的 Element 对象/选项控件"},
                {"name": "index", "type": "number", "desc": "子选项控件需要添加的位置序号"},
                {"name": "options", "type": "Object", "desc": "子控件初始化选项"}
            ],
            "return": {"type": "ecui.ui.Item", "desc": "子选项控件"},
            "remark": "add 方法中如果位置序号不合法，子选项控件将添加在末尾的位置。"
        },

        {
            "name": "append",
            "type": "items",
            "desc": "向选项组最后添加子选项控件。",
            "params": [
                {"name": "item", "type": "string|HTMLElement|ecui.ui.Item", "desc": "控件的 html 内容/控件对应的 Element 对象/选项控件"},
                {"name": "options", "type": "Object", "desc": "子控件初始化选项"}
            ],
            "return": {"type": "ecui.ui.Item", "desc": "子选项控件"},
            "remark": "append 方法是 {'add'|method:'items'} 方法去掉第二个 index 参数的版本。<font color=\"red\">具体的参数请参见实现了接口的控件的说明。</font>"
        },

        {
            "name": "getActived",
            "type": "items",
            "desc": "获取当前处于激活状态的选项。",
            "return": {"type": "ecui.ui.Item", "desc": "子选项控件"}
        },

        {
            "name": "getItems",
            "type": "items",
            "desc": "获取全部的子选项控件。",
            "return": {"type": "Array", "desc": "子选项控件数组"}
        },

        {
            "name": "remove",
            "type": "items",
            "desc": "移除子选项控件。",
            "return": {"type": "ecui.ui.Item", "desc": "被移除的子选项控件"},
            "params": [
                {"name": "item", "type":"number|ecui.ui.Item", "desc": "选项控件的位置序号/选项控件"}
            ]
        },

        {
            "name": "setItemSize",
            "type": "items",
            "desc": "设置控件内所有子选项控件的大小。",
            "params": [
                {"name": "itemWidth", "type": "number", "desc": "子选项控件的宽度"},
                {"name": "itemHeight", "type": "number", "desc": "子选项控件的高度"}
            ]
        }
    ],

    "label": [
        {
            "name": "$click",
            "type": "label",
            "remark": "将点击事件转发到 {'setFor'|method:'label'} 方法指定的控件。"
        },
        
        {
            "name": "setFor",
            "type": "label",
            "desc": "设置控件的事件转发接收控件。",
            "params": [
                {"name": "control", "type": "ecui.ui.Control", "desc": "事件转发接收控件"}
            ],
            "remark": "setFor 方法设置事件转发的被动接收者，如果没有设置，则事件不会被转发。"
        }
    ],

    "format-edit": [
        {
            "name": "$getInputText",
            "type": "format-edit",
            "desc": "获取当前输入的内容，如果是粘贴操作是一个长度超过1的字符串。",
            "return": {"type": "string", "desc": "当前输入的内容"}
        },

        {
            "name": "restore",
            "type": "format-edit",
            "desc": "恢复输入框的值。"
        },

        {
            "name": "validate",
            "type": "format-edit",
            "desc": "检测输入框当前的值是否合法。",
            "return": {"type": "boolean", "desc": "当前值是否合法"}
        }
    ],

    "checkbox": [
        {
            "name": "$click",
            "type": "checkbox",
            "remark": "控件点击时将改变当前的选中状态。"
        },

        {
            "name": "$keydown",
            "type": "checkbox",
            "remark": "屏蔽空格键按下事件。"
        },

        {
            "name": "$keypress",
            "type": "checkbox",
            "remark": "Opera 下仅用 keydown 不能屏蔽空格键事件，还需要在 keypress 中屏蔽。"
        },

        {
            "name": "$keyup",
            "type": "checkbox",
            "remark": "接管空格键的处理，按控格键相当于执行一次点击操作。"
        },

        {
            "name": "getInferiors",
            "type": "checkbox",
            "desc": "获取全部的从属复选框控件。",
            "return": {"type": "Array", "desc": "复选框控件数组"},
            "remark": "复选框控件调用 {'setSuperior'|method:'checkbox'} 方法指定了上级复选框控件后，它就是上级复选框控件的从属复选框控件之一。"
        },

        {
            "name": "getSuperior",
            "type": "checkbox",
            "desc": "获取上级复选框。",
            "return": {"type": "ecui.ui.Checkbox", "desc": "复选框控件"},
            "remark": "getSuperior 方法返回调用 {'setSuperior'|method:'checkbox'} 方法指定的上级复选框控件。"
        },

        {
            "name": "isChecked",
            "type": "checkbox",
            "desc": "判断控件是否选中。",
            "return": {"type": "boolean", "desc": "是否选中"}
        },

        {
            "name": "setChecked",
            "type": "checkbox",
            "desc": "设置复选框控件选中状态。",
            "params": [
                {"name": "status", "type": "boolean", "desc": "是否选中，默认选中"}
            ]
        },

        {
            "name": "setSuperior",
            "type": "checkbox",
            "desc": "设置上级复选框。",
            "params": [
                {"name": "superior", "type": "ecui.ui.Checkbox", "desc": "复选框控件"}
            ],
            "remark": "setSuperior 方法指定上级复选框控件后，可以通过访问上级复选框控件的 {'getInferiors'|method:'checkbox'} 方法获取列表，列表中即包含了当前的控件。"
        }
    ],

    "radio": [
        {
            "name": "$click",
            "type": "radio",
            "remark": "控件点击时将控件设置成为选中状态，同时取消同一个单选框控件组的其它控件的选中状态。"
        },

        {
            "name": "checked",
            "type": "radio",
            "desc": "设置单选框控件为选中状态。",
            "remark": "将控件设置成为选中状态，同时取消同一个单选框控件组的其它控件的选中状态。"
        },

        {
            "name": "getItems",
            "type": "radio",
            "desc": "获取与当前单选框同组的全部单选框。",
            "return": {"type": "Array", "desc": "单选框控件数组"},
            "remark": "getItems 方法返回包括当前单选框在内的与当前单选框同组的全部单选框，同组的单选框选中状态存在唯一性。"
        },

        {
            "name": "getName",
            "type": "radio",
            "desc": "获取控件的表单项名称。",
            "return": {"type": "string", "desc": "单选框组的名称，如果没有关联到任何一个组，返回 undefined"},
            "remark": "单选框控件可以在表单中被提交，getName 方法返回提交时用的表单项名称，表单项名称决定单选框的分组，可以使用 {'setName'|method:'radio'} 方法改变。"
        },

        {
            "name": "getValue",
            "type": "radio",
            "desc": "获取控件的值。",
            "return": {"type": "string", "desc": "控件的值"},
            "remark": "getValue 方法返回控件自身的值，只有控件是选中状态，这个值才会被提交时的表单项使用，判断是否处于选中状态使用 {'isChecked'|method:'radio'} 方法，使用 {'setValue'|method:'radio'} 方法设置。"
        },

        {
            "name": "isChecked",
            "type": "radio",
            "desc": "判断控件是否选中。",
            "return": {"type": "boolean", "desc": "是否选中"}
        },

        {
            "name": "setName",
            "type": "radio",
            "desc": "设置控件的表单项名称。",
            "params": [
                {"name": "name", "type": "string", "desc": "表单项名称，如果省略将设置成无分组"}
            ],
            "remark": "单选框控件可以在表单中被提交，setName 方法设置提交时用的表单项名称，名称相同的单选框位于同一个分组，表单项名称可以使用 {'getName'|method:'radio'} 方法获取。"
        },

        {
            "name": "setValue",
            "type": "radio",
            "desc": "设置控件的值。",
            "params": [
                {"name": "value", "type": "string", "desc": "控件的值"}
            ],
            "remark": "setValue 方法设置控件自身的值，只有控件是选中状态，这个值才会被提交时的表单项使用，判断是否处于选中状态使用 {'isChecked'|method:'radio'} 方法，使用 {'getValue'|method:'radio'} 方法获取设置的值。"
        }
    ],

    "select": [
        {
            "name": "$intercept",
            "type": "select",
            "remark": "控件在下拉框展开时，需要拦截浏览器的点击事件，如果点击在下拉选项区域，则选中当前项，否则直接隐藏下拉选项框，但不会改变控件激活状态。"
        },

        {
            "name": "$keydown",
            "type": "select",
            "remark": "接管上下键与回车键的处理，在下拉框展开时，通过上下键选择当前移入项，如果没有展开，通过下键与回车键会将下拉框展开。"
        },

        {
            "name": "$keypress",
            "type": "select",
            "remark": "Opera 下仅用 keydown 不能屏蔽空格键事件，还需要在 keypress 中屏蔽。"
        },

        {
            "name": "$mousewheel",
            "type": "select",
            "remark": "如果控件拥有焦点，则当前选中项随滚轮滚动而自动指向前一项或者后一项。"
        },

        {
            "name": "$pressend",
            "type": "select",
            "remark": "鼠标左键按压控件结束时设置下一次点击事件被拦截，需要根据点击的位置选择是关闭展开的下拉框还是选中选项。"
        },

        {
            "name": "$pressstart",
            "type": "select",
            "remark": "鼠标左键按压控件开始时显示下拉框。"
        },

        {
            "name": "$remove",
            "type": "select",
            "params": [
                {"name": "item", "type": "ecui.ui.Item", "desc": "选项控件"}
            ],
            "remark": "下拉框移除子选项时需要检查选项是否被选中，如果被选中需要清除状态。"
        },

        {
            "name": "add",
            "type": "select",
            "desc": "添加子选项控件。",
            "params": [
                {"name": "item", "type": "string|HTMLElement|ecui.ui.Item", "desc": "选项控件的 html 内容/控件对应的 Element 对象/选项控件"},
                {"name": "index", "type": "number", "desc": "子选项控件需要添加的位置序号"},
                {"name": "value", "type": "string", "desc": "选项对应的表单项提交值，如果忽略将使用控件的文本内容作为提交值"}
            ],
            "return": {"type": "ecui.ui.Item", "desc": "子选项控件"}
        },

        {
            "name": "append",
            "type": "select",
            "desc": "向下拉框中最后添加子选项控件。",
            "params": [
                {"name": "item", "type": "string|HTMLElement|ecui.ui.Item", "desc": "选项控件的 html 内容/控件对应的 Element 对象/选项控件"},
                {"name": "value", "type": "string", "desc": "选项对应的表单项提交值，如果忽略将使用控件的文本内容作为提交值"}
            ],
            "return": {"type": "ecui.ui.Item", "desc": "子选项控件"},
            "remark": "append 方法是 {'add'|method:'select'} 方法去掉第二个 index 参数的版本。"
        },

        {
            "name": "getSelected",
            "type": "select",
            "desc": "获取被选中的选项控件。",
            "return": {"type": "ecui.ui.Item", "desc": "选项控件"}
        },

        {
            "name": "getValue",
            "type": "select",
            "desc": "获取控件的值。",
            "syntax": "<i>string</i> = <i>ecui.ui.Edit.</i><b>getValue()</b></pre><pre class=\"clsSyntax\"><i>string</i> = <i>ecui.ui.Select.Item.</i><b>getValue()</b>",
            "return": {"type": "string", "desc": "控件的值"},
            "remark": "ecui.ui.Edit.{'getValue'|method:'edit'} 方法参见编辑框控件的说明，ecui.ui.Select.Item.getValue 方法返回选项控件的值，即选项选中时整个下拉框控件的值。"
        },

        {
            "name": "setOptionSize",
            "type": "select",
            "desc": "设置下拉框允许显示的选项数量。",
            "params": [
                {"name": "value", "type": "number", "desc": "显示的选项数量，必须大于 1"}
            ],
            "remark": "如果实际选项数量小于这个数量，没有影响，否则将出现垂直滚动条，通过滚动条控制其它选项的显示。"
        },

        {
            "name": "setSelected",
            "type": "select",
            "desc": "选中选项。",
            "params": [
                {"name": "item", "type": "number|ecui.ui.Item", "desc": "选项的序号/选项控件"}
            ]
        },

        {
            "name": "setValue",
            "type": "select",
            "desc": "设置控件的值。",
            "syntax": "<i>string</i> = <i>ecui.ui.Edit.</i><b>setValue(</b><i>value</i><b>)</b></pre><pre class=\"clsSyntax\"><i>string</i> = <i>ecui.ui.Select.Item.</i><b>setValue(</b><i>value</i><b>)</b>",
            "params": [
                {"name": "value", "type": "string", "desc": "控件的值"}
            ],
            "remark": "setValue 方法设置控件的值，设置的值必须与一个子选项的值相等，否则将被设置为空，使用 {'getValue'|method:'select'} 方法获取设置的值。"
        }
    ],

    "combox": [
    ],

    "multi-select": [
        {
            "name": "$intercept",
            "type": "multi-select",
            "remark": "控件在多选下拉框展开时，需要拦截浏览器的点击事件，如果点击在下拉选项区域，则选中当前项，否则直接隐藏下拉选项框，但不会改变控件激活状态。"
        },

        {
            "name": "$mousewheel",
            "type": "multi-select",
            "remark": "如果控件拥有焦点，则当前选中项随滚轮滚动而自动指向前一项或者后一项。"
        },

        {
            "name": "$pressend",
            "type": "multi-select",
            "remark": "鼠标左键按压控件结束时设置下一次点击事件被拦截，需要根据点击的位置选择是关闭展开的下拉框还是选中选项。"
        },

        {
            "name": "$pressstart",
            "type": "multi-select",
            "remark": "鼠标左键按压控件开始时显示下拉框。"
        },

        {
            "name": "$remove",
            "type": "multi-select",
            "params": [
                {"name": "item", "type": "ecui.ui.Item", "desc": "选项控件"}
            ],
            "remark": "下拉框移除子选项时需要检查选项是否被选中，如果被选中需要清除状态。"
        },

        {
            "name": "getSelected",
            "type": "multi-select",
            "desc": "获取全部选中的选项控件。",
            "return": {"type": "Array", "desc": "选项控件列表"}
        },

        {
            "name": "setOptionSize",
            "type": "multi-select",
            "desc": "设置下拉框允许显示的选项数量。",
            "params": [
                {"name": "value", "type": "number", "desc": "显示的选项数量，必须大于 1"}
            ],
            "remark": "如果实际选项数量小于这个数量，没有影响，否则将出现垂直滚动条，通过滚动条控制其它选项的显示。"
        },

        {
            "name": "setValue",
            "type": "multi-select",
            "desc": "设置控件的值。",
            "params": [
                {"name": "values", "type": "Array", "desc": "控件被选中的值列表"}
            ],
            "remark": "setValue 方法批量设置控件的值，如果设置的某个值与所有子选项的值不相等，将忽略这个值的设置。"
        }
    ],

    "collection": [
        {
            "name": "$setSize",
            "type": "collection",
            "remark": "网格控件的 $setSize 方法设置的大小不一定是实际控件的大小，为了保证子控件宽度与高度完全相等，内部可用区域的宽度与高度需要自动适应成各个子控件的大小的整数倍。"
        },

        {
            "name": "getIndex",
            "type": "collection",
            "owner": "ecui.ui.Collection.Item",
            "desc": "获取网格子控件在网格控件中的序号。",
            "return": {"type": "number", "desc": "子控件的序号"},
            "remark": "在网格控件的事件中，事件对应的 this 是真正产生事件的网格子控件，通过 getIndex 方法能知道当前的网格子控件在网格控件中的序号，参见 {'getItem'|method:'collection'} 方法。"
        },

        {
            "name": "getItem",
            "type": "collection",
            "desc": "获取指定的网格子控件。",
            "params": [
                {"name": "index", "type": "number", "desc": "子控件的总序号"}
            ],
            "return": {"type": "ecui.ui.Control", "desc": "子控件对象"},
            "remark": "子控件的序号从行到列，逐一累加，例如，一个 3*3 的网格控件，第一行第一列序号为 0，第一行第二列序号为 1，第一行第三列序号为 2，第二行第一列序号为3，行二行第二列序号为 4，依此类推。"
        }
    ],

    "calendar": [
        {
            "name": "$setSize",
            "type": "calendar",
            "remark": "日历控件与 {'collection'|control} 类似，$setSize 方法设置的大小不一定是实际控件的大小，受到了内部部件的影响。"
        },

        {
            "name": "getMonth",
            "type": "calendar",
            "desc": "获取日历控件当前显示的月份。",
            "return": {"type": "number", "desc": "月份(1-12)"}
        },

        {
            "name": "getYear",
            "type": "calendar",
            "desc": "获取日历控件当前显示的年份。",
            "return": {"type": "number", "desc": "年份(19xx-20xx)"}
        },

        {
            "name": "move",
            "type": "calendar",
            "desc": "日历显示移动指定的月份数。",
            "params": [
                {"name": "offsetMonth", "type": "number", "desc": "日历移动的月份数"}
            ],
            "remark": "参数为正整数则表示向当前月份之后的月份移动，负数则表示向当前月份之前的月份移动，设置后日历控件会刷新以显示新的日期。"
        },

        {
            "name": "setDate",
            "type": "calendar",
            "desc": "设置日历控件当前显示的日期。",
            "params": [
                {"name": "year", "type": "number", "desc": "年份(19xx-20xx)，如果省略使用浏览器的当前年份"},
                {"name": "month", "type": "number", "desc": "月份(1-12)，如果省略使用浏览器的当前月份"}
            ]
        }
    ],

    "form": [
        {
            "name": "$focus",
            "type": "form",
            "remark": "窗体控件获得焦点时需要将自己置于所有窗体控件的顶部。"
        },

        {
            "name": "center",
            "type": "form",
            "remark": "窗体居中显示。"
        },

        {
            "name": "hide",
            "type": "form",
            "remark": "如果窗体是以 {'showModal'|method:'form'} 方式打开的，隐藏窗体时，需要恢复页面的状态。"
        },

        {
            "name": "setTitle",
            "type": "form",
            "desc": "设置窗体控件标题。",
            "params": [
                {"name": "text", "type": "string", "desc": "窗体标题"}
            ]
        },

        {
            "name": "show",
            "type": "form",
            "remark": "显示窗体控件时，需要将窗体控件设置为获得焦点状态，即窗体控件或者子控件拥有焦点。"
        },

        {
            "name": "showModal",
            "type": "form",
            "desc": "窗体控件以独占方式显示。",
            "params": [
                {"name": "opacity", "type": "number", "desc": "遮罩层透明度，默认为0.05"}
            ],
            "remark": "showModal 方法将窗体控件以独占方式显示，此时鼠标点击窗体以外的内容无效，关闭窗体后自动恢复。"
        }
    ],

    "tree": [
        {
            "name": "$cache",
            "type": "tree",
            "desc": "无效，树控件禁止设置大小。"
        },

        {
            "name": "$click",
            "type": "tree",
            "remark": "控件点击时改变子树控件的显示/隐藏状态。"
        },

        {
            "name": "$resize",
            "type": "tree",
            "desc": "无效，树控件禁止设置大小。"
        },

        {
            "name": "$setSize",
            "type": "tree",
            "desc": "无效，树控件禁止设置大小。"
        },

        {
            "name": "add",
            "type": "tree",
            "desc": "添加子树控件。",
            "params": [
                {"name": "item", "type": "string|ecui.ui.Tree", "desc": "子树控件的 html 内容/树控件"},
                {"name": "index", "type": "number", "desc": "子树控件需要添加的位置序号，不指定将添加在最后"}
            ],
            "return": {"type": "ecui.ui.Tree", "desc": "树控件"}
        },

        {
            "name": "collapse",
            "type": "tree",
            "desc": "收缩当前树控件的所有子树控件。",
            "remark": "collapse 方法将递归的调用子树控件的 collapse 方法。"
        },

        {
            "name": "expand",
            "type": "tree",
            "desc": "展开当前树控件的所有子树控件。",
            "remark": "expand 方法将递归的调用子树控件的 expand 方法。"
        },

        {
            "name": "getChildTrees",
            "type": "tree",
            "desc": "获取当前树控件的所有子树控件。",
            "return": {"type": "Array", "desc": "树控件列表"},
            "remark": "getChildTrees 方法返回使用 {'add'|method:'tree'} 方法或 {'setParent'|method:'tree'} 方法调用声明父子关系的树控件。"
        },

        {
            "name": "getFirst",
            "type": "tree",
            "desc": "获取当前树控件的第一个子树控件。",
            "return": {"type": "ecui.ui.Tree", "desc": "树控件，如果没有，返回 null"}
        },

        {
            "name": "getLast",
            "type": "tree",
            "desc": "获取当前树控件的最后一个子树控件。",
            "return": {"type": "ecui.ui.Tree", "desc": "树控件，如果没有，返回 null"}
        },

        {
            "name": "getNext",
            "type": "tree",
            "desc": "获取当前树控件的后一个同级树控件。",
            "return": {"type": "ecui.ui.Tree", "desc": "树控件，如果没有，返回 null"}
        },

        {
            "name": "getPrev",
            "type": "tree",
            "desc": "获取当前树控件的前一个同级树控件。",
            "return": {"type": "ecui.ui.Tree", "desc": "树控件，如果没有，返回 null"}
        },

        {
            "name": "getRoot",
            "type": "tree",
            "desc": "获取当前树控件的根。",
            "return": {"type": "ecui.ui.Tree", "desc": "树控件的根"}
        },

        {
            "name": "isFold",
            "type": "tree",
            "desc": "当前子控件区域是否显示/隐藏。",
            "return": {"type": "boolean", "desc": "表示子控件区域隐藏，false 表示子控件区域显示"}
        },

        {
            "name": "hide",
            "type": "tree",
            "remark": "隐藏树控件的同时需要将子树区域也隐藏。"
        },

        {
            "name": "setFold",
            "type": "tree",
            "desc": "显示/隐藏子控件区域。",
            "remark": "setFold 方法将触发各级父树控件的 {'onchange'|event:'tree'} 事件。",
            "params": [
                {"name": "status", "type": "boolean", "desc": "如果为 false 表示显示子树控件，否则为隐藏子树控件"}
            ]
        },

        {
            "name": "show",
            "type": "tree",
            "remark": "显示树控件的同时需要将子树区域也显示。"
        }
    ],

    "radio-tree": [
        {
            "name": "getName",
            "type": "radio-tree",
            "desc": "获取控件表单项的名称。",
            "return": {"type": "string", "desc": "INPUT 对象名称"}
        },

        {
            "name": "getSelected",
            "type": "radio-tree",
            "desc": "获取当前树控件选中的项。",
            "return": {"type": "ecui.ui.Tree", "desc": "树控件选中的项"}
        },

        {
            "name": "getValue",
            "type": "radio-tree",
            "desc": "获取控件的值。",
            "return": {"type": "string", "desc": "控件的值"}
        }
    ],

    "check-tree": [
        {
            "name": "getChecked",
            "type": "check-tree",
            "desc": "获取包括当前树控件在内的全部选中的子树控件。",
            "return": {"type": "Array", "desc": "全部选中的树控件列表"}
        },
        {
            "name": "getValue",
            "type": "check-tree",
            "desc": "获取当前树控件复选框的表单项的值。",
            "return": {"type": "string", "desc": "表单项的值"}
        },
        {
            "name": "isChecked",
            "type": "check-tree",
            "desc": "判断树控件是否选中。",
            "return": {"type": "boolean", "desc": "是否选中"}
        },
        {
            "name": "setChecked",
            "type": "check-tree",
            "desc": "设置当前树控件复选框选中状态。",
            "params": [
                {"name": "status", "type": "boolean", "desc": "是否选中当前树控件复选框"}
            ]
        }
    ],

    "table": [
        {
            "name": "$getCell",
            "type": "table",
            "owner": "ecui.ui.Table",
            "desc": "获取单元格元素。",
            "params": [
                {"name": "rowIndex", "type": "number", "desc": "单元格的行数，从0开始"},
                {"name": "colIndex", "type": "number", "desc": "单元格的列数，从0开始"}
            ],
            "return": {"type": "HTMLElement", "desc": "单元格 Element 对象"},
            "remark": "$getCell 方法在合法的行列序号内一定会返回一个 Element 对象，如果当前单元格被合并，将返回合并后的 Element 对象。"
        },

        {
            "name": "$getCols",
            "type": "table",
            "owner": "ecui.ui.Table.Row",
            "desc": "获取一行中单元格的 Element 对象数组。",
            "return": {"type": "Array", "desc": "单元格的 Element 对象数组"}
        },

/*        {
            "name": "$initRow",
            "type": "table",
            "desc": "初始化一行的数据。",
            "params": [
                {"name": "row", "type": "HTMLElement", "desc": "一行的DIV对象"},
                {"name": "index", "type": "number", "desc": "行的序列号"}
            ],
            "return": {"type": "ecui.ui.Table.Row", "desc": "行控件"}
        },
*/
        {
            "name": "$setStyles",
            "type": "table",
            "owner": "ecui.ui.Table.Col",
            "desc": "设置整列的样式。",
            "params": [
                {"name": "name", "type": "string", "desc": "样式的名称"},
                {"name": "value", "type": "string", "desc": "样式的值"},
                {"name": "widthRevise", "type": "string", "desc": "改变样式后表格宽度的变化，如果省略表示没有变化"}
            ],
            "remark": "$setStyles 方法批量设置一列所有单元格的样式，但不包括表头的单元格。"
        },

        {
            "name": "addCol",
            "type": "table",
            "desc": "新增一列。",
            "params": [
                {"name": "options", "type": "列的初始化选项"},
                {"name": "index", "type": "number", "desc": "被添加的列的位置序号，如果不合法将添加在末尾"}
            ],
            "return": {"type": "ecui.ui.Table.Col", "desc": "列控件"},
            "remark": [
                "options 对象支持的属性如下：",
                "<table class=\"clsSTD\"><tr><td>width</td><td>number，列的宽度</td></tr><tr><td>primary</td><td>string，列的基本样式</td></tr><tr><td>title</td><td>string，列的标题</td></tr></table>"
            ]
        },

        {
            "name": "addRow",
            "type": "table",
            "desc": "表格新增一行。",
            "params": [
                {"name": "data", "type": "Array", "desc": "数据源(一维数组)"},
                {"name": "index", "type": "number", "desc": "被添加的行的位置序号，如果不合法将添加在最后"}
            ]
        },
/*
        {
            "name": "addRows",
            "type": "table",
            "desc": "表格新增多行。",
            "params": [
                {"name": "data", "type": "Array", "desc": "数据源(二维数组)"},
                {"name": "index", "type": "number", "desc": "被添加的行的位置序号，如果不合法将添加在最后"}
            ]
        },

        {
            "name": "cancel",
            "type": "table",
            "desc": "结束编辑状态，编辑的内容恢复编辑前的值。",
            "remark": "当表格在编辑状态时，调用 cancel 方法会恢复编辑前的内容，如果需要保存编辑的内容，请使用 {'save'|method:'table'} 方法，如果表格没有处于编辑状态中，调用 cancel 方法没有任何作用。"
        },

        {
            "name": "edit",
            "type": "table",
            "owner": "ecui.ui.Table.Row",
            "desc": "编辑当前行的内容。",
            "remark": "edit 方法使表格进入编辑状态，需要使用 {'save'|method:'table'} 或者 {'cancel'|method:'table'} 方法来结束编辑状态。"
        },
*/
        {
            "name": "getCell",
            "type": "table",
            "desc": "获取单元格控件。",
            "params": [
                {"name": "rowIndex", "type": "number", "desc": "单元格的行数，从0开始"},
                {"name": "colIndex", "type": "number", "desc": "单元格的列数，从0开始"}
            ],
            "return": {"type": "ecui.ui.Control", "desc": "单元格控件"}
        },

        {
            "name": "getCol",
            "type": "table",
            "desc": "获取列控件/一行中的单元格控件。",
            "syntax": "<i>ecui.ui.Table.Col</i> = <i>ecui.ui.Table.</i><b>getCol(</b><i>index</i><b>)</b></pre><pre class=\"clsSyntax\"><i>ecui.ui.Control</i> = <i>ecui.ui.Table.Row.</i><b>getCol(</b><i>index</i><b>)</b>",
            "params": [
                {"name": "index", "type": "number", "desc": "列数，从0开始"}
            ],
            "return": {"type": "ecui.ui.Table.Col", "desc": "列控件/单元格控件"},
            "remark": "列控件只是通常的称呼，实际上就是普通的基础控件，提供了一些针对整列进行操作的方法，包括 {'hide'|method:'table'}、{'setSize'|method:'table'}(仅能设置宽度) 与 {'show'|method:'table'} 方法等。"
        },

        {
            "name": "getColCount",
            "type": "table",
            "desc": "获取列控件的数量。",
            "return": {"type": "number", "desc": "列控件数量"}
        },

        {
            "name": "getCols",
            "type": "table",
            "desc": "获取全部的列控件/一行中的全部单元格控件。",
            "syntax": "<i>Array</i> = <i>ecui.ui.Table.</i><b>getCols()</b></pre><pre class=\"clsSyntax\"><i>Array</i> = <i>ecui.ui.Table.Row.</i><b>getCols()</b>",
            "return": {"type": "Array", "desc": "列控件数组/单元格控件数组"}
        },

        {
            "name": "getRow",
            "type": "table",
            "desc": "获取行控件。",
            "params": [
                {"name": "index", "type": "number", "desc": "行数，从0开始"}
            ],
            "return": {"type": "ecui.ui.Table.Row", "desc": "行控件"}
        },

        {
            "name": "getColCount",
            "type": "table",
            "desc": "获取行控件的数量。",
            "return": {"type": "number", "desc": "行控件数量"}
        },

        {
            "name": "getRows",
            "type": "table",
            "desc": "获取表格中所有的行控件。",
            "return": {"type": "Array", "desc": "行控件列表"}
        },

        {
            "name": "hide",
            "type": "table",
            "desc": "隐藏控件/隐藏一列。",
            "syntax": "<i>boolean</i> = <i>ecui.ui.Table.</i><b>hide()</b></pre><pre class=\"clsSyntax\"><i>boolean</i> = <i>ecui.ui.Table.Col.</i><b>hide()</b>"
        },

        {
            "name": "removeCol",
            "type": "table",
            "desc": "表格移除一列。",
            "params": [
                {"name": "index", "type": "number", "desc": "列的序号，从0开始计数"}
            ]
        },

        {
            "name": "removeRow",
            "type": "table",
            "desc": "移除一行并释放占用的空间。",
            "params": [
                {"name": "index", "type": "number", "desc": "行的序号，从0开始计数"}
            ]
        },
/*
        {
            "name": "removeRows",
            "type": "table",
            "desc": "表格移除所有的行。"
        },

        {
            "name": "save",
            "type": "table",
            "desc": "结束编辑状态，保存编辑的内容回写至表格控件中。",
            "remark": "当表格在编辑状态时，调用 save 方法会保存编辑的内容，如果需要恢复编辑前的内容，请使用 {'cancel'|method:'table'} 方法，如果表格没有处于编辑状态中，调用 save 方法没有任何作用。"
        },

        {
            "name": "setEditor",
            "type": "table",
            "owner": "ecui.ui.Table.Col",
            "desc": "设置指定列的编辑控件。",
            "params": [
                {"name": "editor", "type": "ecui.ui.Input", "desc": "编辑控件"}
            ],
            "remark": "需要编辑的列必须使用 setEditor 方法设置相应的编辑控件，在表格进入编辑状态时，编辑控件会出现在对应的单元格中。"
        },

        {
            "name": "setEllipsis",
            "type": "table",
            "owner": "ecui.ui.Table.Col",
            "desc": "设置指定列是否为省略状态。",
            "params": [
                {"name": "status", "type": "boolean", "desc": "是否为省略状态"}
            ],
            "remark": "如果设置成省略状态，即当前列内容实际宽度超过列宽时，部分内容显示为省略号。"
        },
*/
        {
            "name": "setSize",
            "type": "table",
            "desc": "设置控件的大小/设置整列的宽度。",
            "syntax": "<i>boolean</i> = <i>ecui.ui.Table.</i><b>setSize(</b><i>width, height</i><b>)</b></pre><pre class=\"clsSyntax\"><i>boolean</i> = <i>ecui.ui.Table.Col.</i><b>setSize(</b><i>width</i><b>)</b>"
        },

        {
            "name": "show",
            "type": "table",
            "desc": "显示控件/显示一列。",
            "syntax": "<i>boolean</i> = <i>ecui.ui.Table.</i><b>show()</b></pre><pre class=\"clsSyntax\"><i>boolean</i> = <i>ecui.ui.Table.Col.</i><b>show()</b>"
        }
    ],

    "locked-table": [
    ],

    "popup": [
        {
            "name": "$blur",
            "type": "popup",
            "remark": "弹出菜单控件失去焦点时需要隐藏自己，参见 {'hide'|method:'popup'} 方法。"
        },

        {
            "name": "$intercept",
            "type": "popup",
            "remark": "弹出菜单需要强制拦截浏览器的点击事件，关闭弹出菜单。"
        },

        {
            "name": "add",
            "type": "popup",
            "syntax": "<i>ecui.ui.Items.</i><b>add(</b><i>item, index</i><b>)</b></pre><pre class=\"clsSyntax\"><i>ecui.ui.Popup.Item.</i><b>add(</b><i>item, index</i><b>)</b>"
        },

        {
            "name": "getInferior",
            "type": "popup",
            "desc": "获取当前激活的下级弹出菜单。",
            "return": {"type": "ecui.ui.Popup", "desc": "弹出菜单控件"},
            "remark": "getInferior 方法返回弹出菜单处于显示状态时，通过它打开的子弹出菜单。"
        },

        {
            "name": "getItems",
            "type": "popup",
            "syntax": "<i>Array</i> = <i>ecui.ui.Popup.</i><b>getItems()</b></pre><pre class=\"clsSyntax\"><i>Array</i> = <i>ecui.ui.Popup.Item.</i><b>getItems()</b>",
            "desc": "获取全部的子选项控件/获取当前菜单选项控件的所有子选项控件。",
            "return": {"type": "Array", "desc": "子选项控件列表，如果不存在返回空列表"}
        },

        {
            "name": "getSuperior",
            "type": "popup",
            "desc": "获取当前激活的上级弹出菜单。",
            "return": {"type": "ecui.ui.Popup", "desc": "弹出菜单控件"},
            "remark": "getSuperior 方法返回弹出菜单处于显示状态时，打开它的父弹出菜单。"
        },

        {
            "name": "hide",
            "type": "popup",
            "remark": "隐藏弹出菜单，同时隐藏所有的子弹出菜单。"
        },

        {
            "name": "remove",
            "type": "popup",
            "syntax": "<i>ecui.ui.Items.</i><b>remove(</b><i>item</i><b>)</b></pre><pre class=\"clsSyntax\"><i>ecui.ui.Popup.Item.</i><b>remove(</b><i>item</i><b>)</b>"
        },

        {
            "name": "show",
            "type": "popup",
            "remark": "显示弹出菜单时，必须保证弹出菜单显示在屏幕内，并且子弹出菜单展开的方向尽可能一致。"
        }
    ],

    "listbox": [
        {
            "name": "add",
            "type": "listbox",
            "params": [
                {"name": "item", "type": "string|HTMLElement|ecui.ui.Item", "desc": "选项控件的 html 内容/控件对应的 Element 对象/选项控件"},
                {"name": "index", "type": "number", "desc": "选项控件需要添加的位置序号"},
                {"name": "value", "type": "string", "desc": "选项对应的表单项提交值，如果忽略将使用控件的文本内容作为提交值"}
            ]
        },

        {
            "name": "append",
            "type": "listbox",
            "params": [
                {"name": "item", "type": "string|HTMLElement|ecui.ui.Item", "desc": "选项控件的 html 内容/控件对应的 Element 对象/选项控件"},
                {"name": "value", "type": "string", "desc": "选项对应的表单项提交值，如果忽略将使用控件的文本内容作为提交值"}
            ]
        },

        {
            "name": "getName",
            "type": "listbox",
            "desc": "获取控件的表单项名称。",
            "return": {"type": "string", "desc": "单选框名称"},
            "remark": "多选框控件可以在表单中被提交，getName 方法返回提交时用的表单项名称，表单项名称可以使用 {'setName'|method:'listbox'} 方法改变。"
        },

        {
            "name": "getSelected",
            "type": "listbox",
            "desc": "获取所有选中的选项。",
            "return": {"type": "Array", "desc": "选项数组"}
        },

        {
            "name": "isSelected",
            "type": "listbox",
            "owner": "ecui.ui.Listbox.Item",
            "desc": "判断多选框的选项控件是否被选中。",
            "return": {"type": "boolean", "desc": "选项是否被选中"}
        },

        {
            "name": "selectAll",
            "type": "listbox",
            "desc": "选中所有的选项。",
            "remark": "某些场景下，需要多选框控件的内容都可以被提交，可以在表单的 onsubmit 事件中调用 selectAll 方法全部选择。"
        },

        {
            "name": "setName",
            "type": "listbox",
            "desc": "设置控件的表单项名称。",
            "params": [
                {"name": "name", "type": "string", "desc": "表单项名称"}
            ],
            "remark": "多选框控件可以在表单中被提交，setName 方法设置提交时用的表单项名称，表单项名称可以使用 {'getName'|method:'listbox'} 方法获取。"
        },

        {
            "name": "setSelected",
            "type": "listbox",
            "owner": "ecui.ui.Listbox.Item",
            "desc": "设置选中状态。",
            "params": [
                {"name": "status", "type": "boolean", "desc": "是否选中，默认为选中"}
            ]
        }
    ],

    "progress": [
        {
            "name": "setText",
            "type": "progress",
            "desc": "设置进度的比例以及需要显示的文本。",
            "params": [
                {"name": "rate", "type": "number", "desc": "进度比例，在0-1之间"},
                {"name": "text", "type": "string", "desc": "显示的文本，如果省略将显示成 xx%"}
            ]
        }
    ],

    "palette": [
        {
            "name": "getColor",
            "type": "palette",
            "desc": "获取拾色器当前选中的颜色对象。",
            "return": {"type": "ecui.Color", "desc": "拾色器当前选中的颜色对象"}
        },

        {
            "name": "setColor",
            "type": "palette",
            "desc": "设置拾色器当前选中的颜色对象。",
            "params": [
                {"name": "color", "type": "ecui.Color", "desc": "颜色对象"}
            ]
        }
    ],

    "tab": [
        {
            "name": "$getLeftMostIndex",
            "type": "tab",
            "desc": "获得当前显示的选项卡中左边元素的索引，只在能左右滚动时有效。",
            "return": {"type": "number", "desc": "最左边元素的索引"}
        },

        {
            "name": "getSelected",
            "type": "tab",
            "desc": "获得当前选中的选项卡控件。",
            "return": {"type": "ecui.ui.Tab.Item", "desc": "选中的选项卡控件"}
        },

        {
            "name": "move",
            "type": "tab",
            "desc": "移动分页选项头部。",
            "params": [
                {"name": "skip", "type": "number", "desc": "移动头部指定个数的选项卡数量，正数向后，负数向前"}
            ]
        },

        {
            "name": "setSelected",
            "type": "tab",
            "desc": "设置被选中的选项卡。",
            "params": [
                {"name": "item", "type": "number|ecui.ui.Tab.Item", "desc": "选项卡子选项的索引/选项卡子选项控件"}
            ]
        }
    ]
}
